{"version":3,"sources":["TellulfInfoCell.tsx","solceller/TallPanelDisplay.tsx","solceller/TallPanel.tsx","solceller/energyHelpers.ts","solceller/EnergyGraph.tsx","solceller/MaxEnergyGraph.tsx","solceller/Solceller.tsx","firebase.ts","kalender/HendelseMedTid.tsx","kalender/HendelseFullDag.tsx","weather/WeatherIcon.tsx","external.js","weather/weatherHelpers.ts","weather/WeatherGraph.tsx","kalender/Dag.tsx","kalender/kalenderHelpers.ts","kalender/Kalender.tsx","weather/updateWeather.ts","ruter/updateTrains.ts","redux/actions.ts","ruter/Ruter.tsx","Klokke.tsx","Settings.tsx","Tellulf.tsx","redux/Forecast.ts","redux/Netatmo.ts","redux/NetatmoAverages.ts","redux/Solar.ts","redux/PowerPrices.ts","redux/TibberRealTimeData.ts","redux/reducers.ts","redux/Init.ts","redux/Trains.ts","redux/TibberLastDay.ts","redux/store.ts","tibberUpdater.ts","App.tsx","solarUpdater.ts","index.tsx"],"names":["roundToNumberOfDecimals","number","decimals","factor","Math","round","TellulfInfoCell","React","PureComponent","smartRoundWatt","rounded","space","this","props","unitSpace","toLocaleString","render","text","info","Number","isNaN","valToDisplay","invertValue","absoluteValue","abs","smartRoundKw","fontSize","large","color","colorIfNegative","header","undefined","headerIfNegative","style","flex","display","flexDirection","justifyContent","alignItems","labelColor","unit","defaultProps","TallPanelDisplay","getMinUsage","hytta","prodMax","maxPowerProductionHytta","maxPowerProduction","useMin","consumptionMinimumHytta","consumptionMinimum","key","className","netDay","accumulatedConsumption","accumulatedProduction","producedPercent","consumptionMaximum","localProductionDay","localProductionMonth","localProductionYear","netDayHytta","accumulatedConsumptionHytta","accumulatedProductionHytta","currentConsumptionHytta","consumptionMaximumHytta","currentPower","currentConsumption","currentSolarProduction","consumptionAverage","accumulatedCost","accumulatedReward","localProductionTotal","localProductionMaxDay","localProductionMaxMonth","localProductionMaxYear","localProductionMaxTotal","TallPanel","realtimePower","spent","today","err","console","log","currentNetConsumption","calculatedConsumption","realtimePowerHytta","now","minPower","maxPower","averagePower","consumptionAverageHytta","month","year","total","max","maxDay","maxMonth","maxYear","maxEver","accumulatedRewardHytta","accumulatedCostHytta","actualCost","getSunForTime","time","latitude","longitude","s","SunCalc","getPosition","Moment","toDate","altitude","getEnergyScaleMax","data","maxVal","ceil","formatEnergyScaleTick","getXTicks","start","end","startOf","add","out","isSameOrBefore","hours","push","valueOf","formatTick","local","format","maxSunHeight","solstice","sunTimes","getTimes","solarNoon","getMaxSunHeight","EnergyGraph","constructor","super","state","interval","currentTime","componentDidMount","window","setInterval","reloadTime","componentWillUnmount","clearInterval","getData","dataSet","i","production","price","consumption","getDataPointObject","dstAdd","isDST","Date","byHour","forEach","h","correctedTime","hour","inAWeek","inTwoWeeks","inAMonth","hr","getHours","powerPrices","sun","sunInAWeek","sunInTwoWeeks","sunInAMonth","usedPower","usage","kwh","isSame","avgLastHour","Object","values","setState","initState","solar","height","width","margin","top","right","left","bottom","dataKey","type","scale","tickFormatter","allowDataOverflow","ticks","domain","endOf","yAxisId","hide","orientation","dot","stroke","fill","fillOpacity","strokeOpacity","stackId","y","strokeDasharray","x","r","label","energyText","padding","alignSelf","energyBarHolder","energyBar","transition","restBar","backgroundColor","MaxEnergyGraph","dayName","monthName","yearName","ever","currentWidth","currentProduction","dayWidth","day","monthWidth","yearWidth","currentWidthString","dayWidthString","monthWidthString","yearWidthString","everWidthString","nowString","dayString","monthString","yearString","nowMainText","nowOutsideText","dayMainText","dayOutsideText","monthMainText","monthOutsideText","yearMainText","yearOutsideText","overflow","marginTop","Solceller","tibber","updaters","updatePowerPrices","subscribeToRealTime","updateConsumption","updateConsumptionDaily","attachListeners","attachMaxListeners","realtimePowerHjemme","currentNetConsumptionHytta","currentNetConsumptionTotal","marginBottom","connect","Solar","current","PowerPrices","Init","TibberRealTime","hjemme","TibberLastDay","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","getTimeString","event","timeString","fullDay","oneDay","calendar","lastWeek","nextWeek","sameDay","nextDay","sameElse","newEnd","subtract","toFormats","HendelseMedTid","name","HendelseFullDag","WeatherIcon","innerWidth","getIconLocation","payload","symbol","getTemp","temp","cx","cy","textAnchor","fontFamily","href","opacity","getFullYear","days","e","f","floor","G","C","H","I","L","getEaster","arr","eMoment","sort","getNorwegianDaysOff","colors","WeatherGraph","startTime","from","endTime","to","weather","onClick","limits","lowerRange","upperRange","angle","value","position","vertical","y1","y2","connectNulls","isAnimationActive","strokeWidth","weatherUpdated","showPlace","sted","Dag","togglePlace","loadSted","nyttSted","store","set","date","get","getDinner","dinner","events","src","alt","filter","marginRight","getBirthdays","birthdays","b","matches","match","parseInt","age","substring","length","id","getEvents","a","isBefore","filterForecast","forecast","hoursBefore","hoursAfter","pickBy","isBetween","filterForecastData","getForecastSummary","maxTemp","maxBy","w","minTemp","minBy","rain","sumBy","maxT","minT","createForecastSummary","getWeatherUpdateTime","updated","getPreggo","d","Preggo","percent","toFixed","week","dayOfWeek","weight","getWeather","endOfDay","lastKnown","isAfter","showWeatherGraphForDay","stedToShow","toLocaleUpperCase","gridColumn","gridRow","Forecast","initDay","sortString","sortStamp","parseIcalEvent","startDate","toJSDate","endDate","item","summary","groupString","uid","Error","async","getIcal","url","parsedEvents","Axios","status","IcalExpander","ics","maxIterations","between","sorted","occurrences","proxy","cal","encodeURIComponent","birthday","calP","dinP","bdP","Kalender","kalenderData","dinners","updateData","getDays","clone","diff","cald","createTimeKey","initWeatherSeries","nOut","fromStore","k","getForecastFromYr","lat","lon","getTimeLimits","toString","nResponse","axios","statusText","nData","properties","meta","updated_at","timeseries","instant","details","air_temperature","next_1_hours","precipitation_amount","rainMin","precipitation_amount_min","rainMax","precipitation_amount_max","symbol_code","next_6_hours","parseWeatherHour","toStore","keys","storeToLocalStore","fetchId","uuidv4","ENTUR_URL","updateInitStatus","updateSolarMax","fetchTrains","dispatch","trains","config","headers","actualData","XML","parse","ServiceDelivery","EstimatedTimetableDelivery","EstimatedJourneyVersionFrame","EstimatedVehicleJourney","t","DirectionRef","LineRef","EstimatedCalls","EstimatedCall","c","StopPointRef","ruteTid","AimedArrivalTime","faktiskTid","ExpectedArrivalTime","FramedVehicleJourneyRef","DataFrameRef","DatedVehicleJourneyRef","linje","skalTil","DestinationDisplay","getTrains","then","updateTrains","fetchForecast","updateForecast","parseTrain","fromNow","fromNowM","ruteDiff","Ruter","intervalId","setTimeout","getTrainList","tog","slice","locale","Clock","Settings","setBool","location","reload","auth","signOut","showEnergy","showTrains","htmlFor","checked","onChange","steder","long","Tellulf","toggleMode","setupMode","startReloadLoop","attachNetatmoListener","updateWeather","database","ref","on","snapshot","val","updateNetatmo","updateNetatmoAverages","showEnergySetting","showTrainsSetting","Klokke","temperature","Trains","NetatmoAverages","netatmo","initialState","maxRain","co2","inneFukt","inneTemp","inneTrykk","inneTrykkTrend","updatedNice","humidity","pressure","averageFull","averageMinute","dataTime","nettTariff","nettTariffNeg","defaultStateValues","currency","lastMeterConsumption","lastMeterProduction","minPowerProduction","power","powerProduction","timestamp","toISOString","calculatedHomeAndCabinTotal","previousMeasuredProduction","lastHourByTenMinutes","avgLastHourSamples","avgLastHourStamp","defaultState","totalNetUsage","tellulfReducer","combineReducers","incomingAction","action","newState","Netatmo","omitBy","call","stamp","cost","calculateActualCost","where","startOfMinute","minutes","samples","fromH","calculatedTime","points","v","maxTempPoint","maxRainPoint","minTempPoint","roundedMin","roundedMax","min","parseLimits","composeEnhancers","compose","createStore","applyMiddleware","thunk","netPriceSettings","Hjemme","fast","kwpProd","Hytta","kwhProd","settings","getTibberSettings","queryPrices","tibberHomeKey","method","Authorization","tibberApiKey","query","prices","viewer","home","currentSubscription","priceInfo","p","startsAt","queryUsage","nodes","updatePowerUsage","tmp","updateRealtimeConsumption","daysToAskFor","getDate","outConsumption","outProduction","homes","u","n","updateTibberConsumptionMonth","updateTibberProductionMonth","group","appNickname","tibberPrice","totalCost","netPrice","totalPrice","groupEnd","settingsRef","once","averages","effect","full","todayByHour","startOfDay","map","minutesFromMidnight","parseByHour","m","refDay","refMonth","refYear","App","loggedIn","user","username","password","onAuthStateChanged","doLogin","alert","signInWithEmailAndPassword","catch","error","errorCode","code","errorMessage","message","getLogin","placeholder","target","disabled","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9f15b6a2.chunk.js","sourcesContent":["import React from 'react';\nimport { GenericProps } from './types/generic';\n\nconst defaultFontSize = 16;\nconst largeFontSize = 24;\nconst labelFontSize = 10;\n\ninterface Props {\n  info: number;\n  decimals: number;\n  fontSize: number;\n  large: boolean;\n  unitSpace: boolean;\n  color: string;\n  colorIfNegative: string;\n  labelColor: string;\n  header: string | undefined;\n  headerIfNegative: string | undefined;\n  unit: string | undefined;\n  invertValue: boolean;\n  absoluteValue: boolean;\n  smartRoundKw: boolean;\n}\n\nexport function roundToNumberOfDecimals(number: number, decimals: number): number {\n  const factor = 10 ** decimals;\n  return Math.round(factor * number) / factor;\n}\n\nclass TellulfInfoCell extends React.PureComponent<Props, GenericProps> {\n  public static defaultProps = {\n    header: undefined,\n    headerIfNegative: undefined,\n    info: '-',\n    large: false,\n    fontSize: defaultFontSize,\n    decimals: 0,\n    unit: '',\n    unitSpace: false,\n    color: '#FFFFFF',\n    labelColor: '#777777',\n    colorIfNegative: '#FFFFFF',\n    invertValue: false,\n    absoluteValue: false,\n    smartRoundKw: false,\n  };\n\n  smartRoundWatt(number: number): string {\n    const rounded = Math.round(number);\n    const space = this.props.unitSpace ? ' ' : '';\n    if (rounded === 0) return '-';\n    if (rounded < 100) return `${rounded.toLocaleString()}`;\n    return `${(Math.round(rounded / 100) / 10).toLocaleString()}${space}k`;\n  }\n\n  public render(): React.ReactNode {\n    let text = '-';\n    if (typeof this.props.info === 'number') {\n      // Don't even try\n      if (Number.isNaN(this.props.info)) {\n        return null;\n      }\n\n      // Invert?\n      let valToDisplay = !this.props.invertValue ? this.props.info : this.props.info * -1;\n\n      // absolute?\n      if (this.props.absoluteValue) {\n        valToDisplay = Math.abs(valToDisplay);\n      }\n\n      // Text to show\n      if (this.props.smartRoundKw) {\n        text = this.smartRoundWatt(valToDisplay);\n      } else {\n        text = roundToNumberOfDecimals(valToDisplay, this.props.decimals).toLocaleString();\n      }\n    } else if (typeof this.props.info === 'string') {\n      text = this.props.info;\n    }\n\n    // Figure out the font size!\n    let { fontSize } = this.props;\n    // Not explicitly set, but large!\n    if (this.props.fontSize === defaultFontSize && this.props.large) {\n      fontSize = largeFontSize;\n    }\n\n    const space = this.props.unitSpace ? ' ' : null;\n    const color = this.props.info >= 0 ? this.props.color : this.props.colorIfNegative;\n\n    let header = this.props.header;\n    if (this.props.info < 0 && this.props.headerIfNegative !== undefined) {\n      header = this.props.headerIfNegative;\n    }\n\n    return (\n      <div\n        style={{\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'spaceAround',\n          alignItems: 'center',\n          fontSize,\n        }}\n      >\n        {this.props.header && (\n          <span style={{ fontSize: labelFontSize, color: this.props.labelColor }}>{header}</span>\n        )}\n        <span style={{ color }}>\n          {text}\n          {space}\n          {this.props.unit}\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default TellulfInfoCell;\n","import React from 'react';\nimport TellulfInfoCell from '../TellulfInfoCell';\nimport './solceller.css';\nimport { GenericProps } from '../types/generic';\n\ninterface Props {\n  currentPower: number;\n  netDay: number;\n  netDayHytta: number;\n  currentConsumption: number;\n  currentConsumptionHytta: number;\n  currentSolarProduction: number;\n  producedPercent: number;\n  accumulatedConsumption: number;\n  accumulatedConsumptionHytta: number;\n  consumptionMinimum: number;\n  consumptionAverage: number;\n  consumptionMaximum: number;\n  consumptionMinimumHytta: number;\n  consumptionAverageHytta: number;\n  consumptionMaximumHytta: number;\n  accumulatedProduction: number;\n  accumulatedProductionHytta: number;\n  accumulatedCost: number;\n  accumulatedReward: number;\n  accumulatedCostHytta: number;\n  accumulatedRewardHytta: number;\n  maxPowerProduction: number;\n  maxPowerProductionHytta: number;\n  localProductionDay: number;\n  localProductionMonth: number;\n  localProductionYear: number;\n  localProductionTotal: number;\n  localProductionMaxDay: number;\n  localProductionMaxMonth: number;\n  localProductionMaxYear: number;\n  localProductionMaxTotal: number;\n}\n\nclass TallPanelDisplay extends React.PureComponent<Props, GenericProps> {\n  public static defaultProps = {\n    currentPower: 0,\n    netDay: 0,\n    currentConsumption: 0,\n    currentSolarProduction: 0,\n    producedPercent: 0,\n    accumulatedConsumption: 0,\n    consumptionMinimum: 0,\n    consumptionAverage: 0,\n    consumptionMaximum: 0,\n    accumulatedProduction: 0,\n    accumulatedCost: 0,\n    accumulatedReward: 0,\n    maxPowerProduction: 0,\n    localProductionDay: 0,\n    localProductionMonth: 0,\n    localProductionYear: 0,\n    localProductionTotal: 0,\n    localProductionMaxDay: 0,\n    localProductionMaxMonth: 0,\n    localProductionMaxYear: 0,\n    localProductionMaxTotal: 0,\n  };\n\n  // Return either minimum usage or maximum production (one of them is zero!)\n  private getMinUsage(hytta: boolean) {\n    const prodMax = !hytta ? this.props.maxPowerProduction : this.props.maxPowerProductionHytta;\n    const useMin = !hytta ? this.props.consumptionMinimum : this.props.consumptionMinimumHytta;\n    if (prodMax > 0) {\n      return (\n        <TellulfInfoCell key=\"maxProd\" info={prodMax} header=\"max prod\" smartRoundKw unit=\"W\" />\n      );\n    } else {\n      return (\n        <TellulfInfoCell key=\"maxProd\" info={useMin} header=\"min bruk\" smartRoundKw unit=\"W\" />\n      );\n    }\n  }\n\n  public render(): React.ReactNode {\n    return (\n      <div\n        style={{\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'space-evenly',\n        }}\n      >\n        <div className=\"energyTableRow\">Hjemme</div>\n        <div className=\"energyTableRow\">\n          <TellulfInfoCell\n            info={this.props.netDay}\n            unit=\"kr\"\n            header=\"netto dag\"\n            decimals={2}\n            unitSpace\n            key=\"netDay\"\n          />\n          <TellulfInfoCell\n            info={this.props.accumulatedConsumption}\n            unit=\"kWh\"\n            header=\"forbruk i dag\"\n            key=\"paidDay\"\n            decimals={1}\n          />\n          <TellulfInfoCell\n            info={this.props.accumulatedProduction}\n            unit=\"kWh\"\n            header=\"solgt i dag\"\n            key=\"soldDay\"\n            decimals={1}\n          />\n        </div>\n        <div className=\"energyTableRow\">\n          <TellulfInfoCell\n            info={this.props.producedPercent}\n            unit=\"%\"\n            header=\"produsert %\"\n            decimals={1}\n            key=\"prodPercent\"\n          />\n          {this.getMinUsage(false)}\n          <TellulfInfoCell\n            info={this.props.consumptionMaximum}\n            header=\"max bruk\"\n            key=\"maxBruk\"\n            smartRoundKw\n            unit=\"W\"\n          />\n        </div>\n        <div className=\"energyTableRow\">\n          <TellulfInfoCell\n            info={this.props.localProductionDay}\n            unit=\"kWh\"\n            header=\"prod dag\"\n            decimals={1}\n            key=\"prodDay\"\n          />\n          <TellulfInfoCell\n            info={this.props.localProductionMonth}\n            unit=\"kWh\"\n            header=\"prod måned\"\n            decimals={0}\n            key=\"prodMonth\"\n          />\n          <TellulfInfoCell\n            info={this.props.localProductionYear / 1000}\n            unit=\"MWh\"\n            header=\"prod år\"\n            decimals={1}\n            key=\"prodYear\"\n          />\n        </div>\n        <div className=\"energyTableRow\">Hytta</div>\n        <div className=\"energyTableRow\">\n          <TellulfInfoCell\n            info={this.props.netDayHytta}\n            unit=\"kr\"\n            header=\"netto dag\"\n            decimals={1}\n            key=\"cabinMoney\"\n          />\n          <TellulfInfoCell\n            info={this.props.accumulatedConsumptionHytta}\n            unit=\"kWh\"\n            header=\"forbruk i dag\"\n            decimals={1}\n            key=\"cabinUsed\"\n          />\n          <TellulfInfoCell\n            info={this.props.accumulatedProductionHytta}\n            unit=\"kWh\"\n            header=\"solgt i dag\"\n            decimals={1}\n            key=\"cabinMade\"\n          />\n        </div>\n        <div className=\"energyTableRow\">\n          <TellulfInfoCell\n            info={this.props.currentConsumptionHytta}\n            unit=\"W\"\n            header=\"forbruk nå\"\n            decimals={0}\n            key=\"cabinCurrent\"\n          />\n          {this.getMinUsage(true)}\n          <TellulfInfoCell\n            info={this.props.consumptionMaximumHytta}\n            unit=\"W\"\n            header=\"max bruk\"\n            decimals={1}\n            smartRoundKw\n            key=\"cabinMaxUse\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TallPanelDisplay;\n","import React from 'react';\nimport TallPanelDisplay from './TallPanelDisplay';\nimport { SolarCurrent } from '../types/solar';\nimport { TibberRealtimeState } from '../types/tibber';\nimport { GenericProps } from '../types/generic';\n\ninterface Props {\n  realtimePower: TibberRealtimeState;\n  realtimePowerHytta: TibberRealtimeState;\n  currentSolarProduction: SolarCurrent;\n  currentNetConsumption: number;\n  max: { maxDay: number; maxYear: number; maxMonth: number; maxEver: number };\n}\n\nclass TallPanel extends React.PureComponent<Props, GenericProps> {\n  public render(): React.ReactNode {\n    // Calculate percentage of usage\n    let producedPercent = 0;\n    try {\n      if (this.props.realtimePower.accumulatedConsumption) {\n        // Brukt = laget hjemme + betalt for - solgt\n        const spent =\n          this.props.currentSolarProduction.today +\n          this.props.realtimePower.accumulatedConsumption * 1000 -\n          this.props.realtimePower.accumulatedProduction * 1000;\n        producedPercent = (this.props.currentSolarProduction.today / spent) * 100;\n      }\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.log(err);\n    }\n\n    return (\n      <TallPanelDisplay\n        currentPower={this.props.currentNetConsumption}\n        currentConsumption={this.props.realtimePower.calculatedConsumption}\n        currentConsumptionHytta={this.props.realtimePowerHytta.calculatedConsumption}\n        currentSolarProduction={this.props.currentSolarProduction.now}\n        producedPercent={producedPercent}\n        accumulatedConsumption={this.props.realtimePower.accumulatedConsumption}\n        accumulatedConsumptionHytta={this.props.realtimePowerHytta.accumulatedConsumption}\n        accumulatedProduction={this.props.realtimePower.accumulatedProduction}\n        accumulatedProductionHytta={this.props.realtimePowerHytta.accumulatedProduction}\n        consumptionMinimum={this.props.realtimePower.minPower}\n        consumptionMaximum={this.props.realtimePower.maxPower}\n        consumptionAverage={this.props.realtimePower.averagePower}\n        consumptionMinimumHytta={this.props.realtimePowerHytta.minPower}\n        consumptionMaximumHytta={this.props.realtimePowerHytta.maxPower}\n        consumptionAverageHytta={this.props.realtimePowerHytta.averagePower}\n        localProductionDay={this.props.currentSolarProduction.today / 1000}\n        localProductionMonth={this.props.currentSolarProduction.month / 1000}\n        localProductionYear={this.props.currentSolarProduction.year / 1000}\n        localProductionTotal={this.props.currentSolarProduction.total / 1000}\n        localProductionMaxDay={this.props.max.maxDay}\n        localProductionMaxMonth={this.props.max.maxMonth}\n        localProductionMaxYear={this.props.max.maxYear}\n        localProductionMaxTotal={this.props.max.maxEver}\n        accumulatedReward={this.props.realtimePower.accumulatedReward}\n        accumulatedRewardHytta={this.props.realtimePowerHytta.accumulatedReward}\n        maxPowerProduction={this.props.realtimePower.maxPowerProduction}\n        maxPowerProductionHytta={this.props.realtimePowerHytta.maxPowerProduction}\n        accumulatedCost={this.props.realtimePower.accumulatedCost}\n        accumulatedCostHytta={this.props.realtimePowerHytta.accumulatedCost}\n        netDay={this.props.realtimePower.actualCost}\n        netDayHytta={this.props.realtimePowerHytta.actualCost}\n      />\n    );\n  }\n}\n\nexport default TallPanel;\n","import SunCalc from 'suncalc';\nimport Moment from 'moment';\nimport { roundToNumberOfDecimals } from '../TellulfInfoCell';\nimport { EnergyGraphDataSet } from './EnergyGraph';\n\nconst defaultLatitude = 59.9409;\nconst defaultLongitude = 10.6991;\n\nexport interface TimeLimits {\n  start: Moment.Moment;\n  end: Moment.Moment;\n}\n\nexport function getSunForTime(\n  time: Date | string | Moment.Moment | number,\n  latitude: number = defaultLatitude,\n  longitude: number = defaultLongitude,\n): number {\n  const s = SunCalc.getPosition(Moment(time).toDate(), latitude, longitude);\n  return Math.max(0, s.altitude);\n}\n\nexport function getMaxSunHeight(latitude = defaultLatitude, longitude = defaultLongitude): number {\n  try {\n    // Get max height of sun in position\n    const solstice = Moment('2018-06-21').toDate();\n    const sunTimes = SunCalc.getTimes(solstice, latitude, longitude);\n    const data = SunCalc.getPosition(sunTimes.solarNoon, latitude, longitude);\n    return data.altitude;\n  } catch (err) {\n    return 1;\n  }\n}\n\n// Get maximum value for energy scale axis\nexport function getEnergyScaleMax(data: number): number {\n  const maxVal = Math.ceil(data / 1000);\n  return Math.max(5, maxVal);\n}\n\nexport function formatEnergyScaleTick(data: number): string {\n  // return Number(data, 10).toLocaleString();\n  return `${roundToNumberOfDecimals(data, 1)}`;\n}\n\nexport function getDataPointObject(): EnergyGraphDataSet {\n  const out = {};\n  const time = Moment().startOf('day');\n  for (let i = 0; i < 144; i += 1) {\n    const key = time.valueOf();\n    out[key] = {\n      time: key,\n      production: null,\n      price: null,\n      consumption: null,\n    };\n    time.add(10, 'minutes');\n  }\n  return out as EnergyGraphDataSet;\n}\n\nexport function getXAxis(): [number, number] {\n  const from = Moment().startOf('day').valueOf();\n  const to = Moment().endOf('day').valueOf();\n  return [from, to];\n}\n\nexport function getTimeLimits(): TimeLimits {\n  const start = Moment().startOf('day');\n  const end = Moment().add(1, 'day').startOf('day');\n  return { start, end };\n}\n\nexport function getXTicks(): number[] {\n  const { start, end } = getTimeLimits();\n  const out = [];\n  while (start.isSameOrBefore(end)) {\n    if (start.hours() % 2 === 0) {\n      out.push(start.valueOf());\n    }\n    start.add(1, 'hours');\n  }\n  return out;\n}\n\nexport function formatTick(data: number): string {\n  const time = Moment(data).local();\n  return time.format('HH');\n}\n","import React from 'react';\nimport Moment from 'moment';\nimport {\n  XAxis,\n  YAxis,\n  Area,\n  Line,\n  ReferenceLine,\n  ReferenceDot,\n  ComposedChart,\n  ResponsiveContainer,\n  CartesianGrid,\n  Label,\n} from 'recharts';\n\nimport './solceller.css';\n\nimport {\n  getMaxSunHeight,\n  getEnergyScaleMax,\n  getSunForTime,\n  formatEnergyScaleTick,\n  getDataPointObject,\n  getXAxis,\n  getXTicks,\n  formatTick,\n} from './energyHelpers';\n\nimport { SolarCurrent, SolarMax, SolarHour } from '../types/solar';\nimport { InitState } from '../types/initstate';\nimport { PowerPriceState, TibberRealtimeState, TibberUsageState } from '../types/tibber';\n\nconst maxSunHeight = getMaxSunHeight();\n\ninterface Props {\n  currentSolarProduction: SolarCurrent;\n  powerPrices: PowerPriceState;\n  latitude: number;\n  longitude: number;\n  usedPower: TibberUsageState;\n  realtimePower: TibberRealtimeState;\n  initState: InitState;\n  max: SolarMax;\n  currentNetConsumption: number;\n}\n\nexport interface EnergyGraphDataSet {\n  [s: string]: {\n    time: number;\n    price: number | null;\n    sun: number | null;\n    sunInAWeek: number | null;\n    sunInTwoWeeks: number | null;\n    sunInAMonth: number | null;\n    production: number | null;\n    consumption: number | null;\n  };\n}\n\ninterface State {\n  currentTime: number;\n}\n\nclass EnergyGraph extends React.PureComponent<Props, State> {\n  public state: State;\n  private interval = 0;\n\n  public constructor(props: Props) {\n    super(props);\n    this.state = {\n      currentTime: Moment().valueOf(),\n    };\n  }\n\n  public componentDidMount(): void {\n    this.interval = window.setInterval(() => {\n      this.reloadTime();\n    }, 300000); // Flytt sola hvert femte minutt\n  }\n\n  public componentWillUnmount(): void {\n    window.clearInterval(this.interval);\n  }\n\n  private getData() {\n    const dataSet: EnergyGraphDataSet = getDataPointObject();\n    const dstAdd = Moment().isDST() ? 3600000 : 0;\n    const timeZoneAdd = 3600000;\n    const now = new Date();\n\n    // Map production data\n    this.props.currentSolarProduction.byHour.forEach((h: SolarHour) => {\n      // Correct production time for UTC\n      const correctedTime = h.time + timeZoneAdd + dstAdd;\n      if (correctedTime in dataSet) {\n        dataSet[correctedTime].production = h.production / 1000;\n      }\n      // Sun data and consumpton\n      if (h.time in dataSet) {\n        const hour = new Date(h.time);\n\n        const inAWeek = Moment(h.time).add(1, 'week').toDate();\n        const inTwoWeeks = Moment(h.time).add(2, 'week').toDate();\n        const inAMonth = Moment(h.time).add(1, 'month').toDate();\n        const hr = hour.getHours();\n\n        // Price\n        const price = this.props.powerPrices[hr];\n        dataSet[h.time].price = price.total;\n\n        // Sun data\n        dataSet[h.time].sun = getSunForTime(hour, this.props.latitude, this.props.longitude);\n        dataSet[h.time].sunInAWeek = getSunForTime(\n          inAWeek,\n          this.props.latitude,\n          this.props.longitude,\n        );\n        dataSet[h.time].sunInTwoWeeks = getSunForTime(\n          inTwoWeeks,\n          this.props.latitude,\n          this.props.longitude,\n        );\n        dataSet[h.time].sunInAMonth = getSunForTime(\n          inAMonth,\n          this.props.latitude,\n          this.props.longitude,\n        );\n\n        // Consumption\n        if (hour < now) {\n          if (hr in this.props.usedPower) {\n            const usage = this.props.usedPower[hr];\n            const kwh = Number(usage.consumption);\n            dataSet[h.time].consumption = kwh;\n          }\n\n          if (Moment(hour).isSame(Moment(), 'hour')) {\n            dataSet[h.time].consumption = this.props.realtimePower.avgLastHour / 1000;\n          }\n        }\n      }\n    });\n    // console.log(Object.values(dataSet));\n    return Object.values(dataSet);\n  }\n\n  private reloadTime() {\n    this.setState({ currentTime: Moment().valueOf() });\n  }\n\n  public render(): React.ReactNode {\n    if (!this.props.initState.powerPrices || !this.props.initState.solar) return null;\n\n    // const dataAge = this.props.current.dataTime.diff(Moment(), 'seconds');\n    // const textColor = (dataAge < 120) ? '#FFFFFF' : '#FF0000'; // Rød tekst om data er over to minutter gamle\n    const data = this.getData();\n\n    return (\n      <div\n        style={{\n          height: '12vh',\n          width: '100%',\n        }}\n      >\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <ComposedChart\n            margin={{\n              top: 0,\n              right: 10,\n              left: 10,\n              bottom: 0,\n            }}\n            data={data}\n          >\n            <XAxis\n              dataKey=\"time\"\n              type=\"number\"\n              scale=\"time\"\n              tickFormatter={formatTick}\n              allowDataOverflow={false}\n              ticks={getXTicks()}\n              domain={getXAxis()}\n            />\n            {false && (\n              <YAxis\n                width={25}\n                yAxisId=\"price\"\n                ticks={[0.5, 1.0, 1.5, 2]}\n                orientation=\"right\"\n                type=\"number\"\n                domain={[0, 2]}\n                label={{\n                  angle: 90,\n                  value: 'kr',\n                  stroke: '#ffffff55',\n                  fill: '#ffffff55',\n                  fontSize: 15,\n                  position: 'right',\n                }}\n              />\n            )}\n            <YAxis\n              width={10}\n              yAxisId=\"kwh\"\n              type=\"number\"\n              tickFormatter={formatEnergyScaleTick}\n              domain={[0, getEnergyScaleMax]}\n            >\n              {false && (\n                <Label\n                  angle={-90}\n                  value=\"kw\"\n                  stroke=\"#ffffff55\"\n                  fill=\"#ffffff55\"\n                  fontSize={15}\n                  position=\"insideTop\"\n                />\n              )}\n            </YAxis>\n            <YAxis\n              width={0}\n              yAxisId=\"sun\"\n              hide\n              allowDataOverflow\n              ticks={[]}\n              type=\"number\"\n              orientation=\"right\"\n              domain={[0, maxSunHeight]}\n            />\n            {false && (\n              <Line\n                yAxisId=\"price\"\n                dot={false}\n                type=\"step\"\n                connectNulls\n                dataKey=\"price\"\n                stroke=\"#8884d8\"\n              />\n            )}\n            <Line dot={false} yAxisId=\"sun\" type=\"basis\" dataKey=\"sun\" stroke=\"#FFFFFF88\" />\n            <Line dot={false} yAxisId=\"sun\" type=\"basis\" dataKey=\"sunInAWeek\" stroke=\"#FFFFFF55\" />\n            <Line\n              dot={false}\n              yAxisId=\"sun\"\n              type=\"basis\"\n              dataKey=\"sunInTwoWeeks\"\n              stroke=\"#FFFFFF33\"\n            />\n            <Line dot={false} yAxisId=\"sun\" type=\"basis\" dataKey=\"sunInAMonth\" stroke=\"#FFFFFF22\" />\n            <Area\n              yAxisId=\"kwh\"\n              dot={false}\n              type=\"monotone\"\n              dataKey=\"production\"\n              fill=\"#00FF00\"\n              stroke=\"#00FF00\"\n              fillOpacity=\"0.2\"\n              strokeOpacity=\"0.2\"\n              stackId=\"1\"\n            />\n            <Area\n              yAxisId=\"kwh\"\n              dot={false}\n              type=\"monotone\"\n              dataKey=\"consumption\"\n              fill=\"#FF0000\"\n              stroke=\"#FF0000\"\n              fillOpacity=\"0.15\"\n              strokeOpacity=\"0.15\"\n              stackId=\"1\"\n            />\n            {false && <CartesianGrid stroke=\"#FFFFFF55\" strokeDasharray=\"1 2\" vertical={false} />}\n            <ReferenceLine\n              yAxisId=\"kwh\"\n              y={this.props.max.maxDay / 1000}\n              stroke=\"#FFFF0088\"\n              strokeDasharray=\"3 3\"\n            />\n            <ReferenceDot\n              x={this.state.currentTime}\n              y={getSunForTime(this.state.currentTime, this.props.latitude, this.props.longitude)}\n              yAxisId=\"sun\"\n              fill=\"#FFFF00\"\n              stroke=\"none\"\n              r={4}\n              label={''}\n            />\n            {false && this.props.currentNetConsumption && this.props.currentNetConsumption > 0 && (\n              <ReferenceDot\n                yAxisId=\"kwh\"\n                y={this.props.currentNetConsumption / 1000}\n                x={this.props.currentSolarProduction.currentTime.valueOf()}\n                r={3}\n                fill=\"#ffffff44\"\n                stroke=\"#ffffff\"\n                label={''}\n              >\n                <Label\n                  value={`${Number(this.props.currentNetConsumption).toLocaleString()}`}\n                  stroke=\"#FF0000\"\n                  fill=\"#FF0000\"\n                  fontSize={35}\n                  position=\"left\"\n                />\n              </ReferenceDot>\n            )}\n            {false && this.props.currentSolarProduction.now > 0 && (\n              <ReferenceDot\n                yAxisId=\"kwh\"\n                label={''}\n                y={this.props.currentSolarProduction.now / 1000}\n                x={this.props.currentSolarProduction.currentTime.valueOf()}\n                r={3}\n                fill=\"#ffffff44\"\n                stroke=\"#ffffff\"\n              >\n                <Label\n                  value={`${Number(\n                    this.props.currentSolarProduction.averageMinute,\n                  ).toLocaleString()}`}\n                  stroke=\"#00FF00\"\n                  fill=\"#00FF00\"\n                  fontSize={35}\n                  position=\"right\"\n                />\n              </ReferenceDot>\n            )}\n          </ComposedChart>\n        </ResponsiveContainer>\n      </div>\n    );\n  }\n}\n\nexport default EnergyGraph;\n","import React from 'react';\nimport { Style, GenericProps } from '../types/generic';\nimport Moment from 'moment';\n\ninterface Props {\n  day: number;\n  month: number;\n  year: number;\n  ever: number;\n  currentProduction: number;\n}\n\nconst insideTextThreshold = 50;\n\nconst energyText: Style = {\n  padding: '8px 0px 8px 0px',\n  fontSize: '12px',\n  alignSelf: 'center',\n};\n\nconst energyBarHolder: Style = {\n  width: '100%',\n  display: 'flex',\n  flexDirection: 'row',\n};\n\nconst energyBar: Style = {\n  alignItems: 'center',\n  flexDirection: 'row',\n  display: 'flex',\n  transition: 'width 3s',\n  justifyContent: 'center',\n};\n\nconst restBar: Style = {\n  alignItems: 'center',\n  display: 'flex',\n  flex: 1,\n  transition: 'width 1s',\n  justifyContent: 'flex-start',\n  backgroundColor: '#00000033',\n};\n\nclass MaxEnergyGraph extends React.PureComponent<Props, GenericProps> {\n  public static defaultProps = {\n    day: 0,\n    month: 0,\n    year: 0,\n    ever: 4500,\n  };\n  public render(): React.ReactNode {\n    const now = Moment();\n    const dayName = now.format('dddd:');\n    const monthName = now.format('MMM:');\n    const yearName = now.format('YYYY:');\n    const ever = this.props.ever ? this.props.ever : 4254;\n    const currentWidth = (this.props.currentProduction / ever) * 100;\n    const dayWidth = (this.props.day / ever) * 100;\n    const monthWidth = (this.props.month / ever) * 100;\n    const yearWidth = (this.props.year / ever) * 100;\n    const everWidth = 1 * 100;\n    const currentWidthString = `${currentWidth}%`;\n    const dayWidthString = `${dayWidth}%`;\n    const monthWidthString = `${monthWidth}%`;\n    const yearWidthString = `${yearWidth}%`;\n    const everWidthString = `${everWidth}%`;\n    const nowString = `nå: ${this.props.currentProduction} W`;\n    const dayString = `${dayName} ${this.props.day} W`;\n    const monthString = `${monthName} ${this.props.month} W`;\n    const yearString = `${yearName} ${this.props.year} W`;\n    const nowMainText = currentWidth > insideTextThreshold ? nowString : '';\n    const nowOutsideText = currentWidth > insideTextThreshold ? '' : nowString;\n    const dayMainText = dayWidth > insideTextThreshold ? dayString : '';\n    const dayOutsideText = dayWidth > insideTextThreshold ? '' : dayString;\n    const monthMainText = monthWidth > insideTextThreshold ? monthString : '';\n    const monthOutsideText = monthWidth > insideTextThreshold ? '' : monthString;\n    const yearMainText = yearWidth > insideTextThreshold ? yearString : '';\n    const yearOutsideText = yearWidth > insideTextThreshold ? '' : yearString;\n\n    return (\n      <div\n        style={{\n          height: '12vh',\n          width: '90%',\n          padding: '0 5% 0 5%',\n          display: 'flex',\n          flexDirection: 'column',\n          overflow: 'hidden',\n          alignItems: 'flex-start',\n          justifyContent: 'flex-start',\n          marginTop: '1vh',\n        }}\n      >\n        <div style={{ ...energyBarHolder }}>\n          <div style={{ ...energyBar, backgroundColor: '#00FF0055', width: currentWidthString }}>\n            <span style={energyText}>{nowMainText}</span>\n          </div>\n          <div style={restBar}>\n            <span style={energyText}>{nowOutsideText}</span>\n          </div>\n        </div>\n        <div style={{ ...energyBarHolder }}>\n          <div style={{ ...energyBar, backgroundColor: '#00FF0055', width: dayWidthString }}>\n            <span style={energyText}>{dayMainText}</span>\n          </div>\n          <div style={restBar}>\n            <span style={energyText}>{dayOutsideText}</span>\n          </div>\n        </div>\n        <div style={{ ...energyBarHolder }}>\n          <div style={{ ...energyBar, backgroundColor: '#00FF0044', width: monthWidthString }}>\n            <span style={energyText}>{monthMainText}</span>\n          </div>\n          <div style={restBar}>\n            <span style={energyText}>{monthOutsideText}</span>\n          </div>\n        </div>\n        <div style={{ ...energyBarHolder }}>\n          <div style={{ ...energyBar, backgroundColor: '#00FF0033', width: yearWidthString }}>\n            <span style={energyText}>{yearMainText}</span>\n          </div>\n          <div style={restBar}>\n            <span style={energyText}>{yearOutsideText}</span>\n          </div>\n        </div>\n        <div style={{ ...energyBarHolder }}>\n          <div style={{ ...energyBar, backgroundColor: '#00FF0022', width: everWidthString }}>\n            <span style={energyText}>max: {ever} W</span>\n          </div>\n          <div style={restBar}>\n            <span style={energyText}>{yearOutsideText}</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MaxEnergyGraph;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport TallPanel from './TallPanel';\nimport TellulfInfoCell from '../TellulfInfoCell';\nimport EnergyGraph from './EnergyGraph';\nimport MaxEnergyGraph from './MaxEnergyGraph';\nimport { AppStore } from '../redux/reducers';\nimport TibberUpdater from '../tibberUpdater';\nimport SolarUpdater from '../solarUpdater';\nimport { InitState } from '../types/initstate';\nimport { GenericProps } from '../types/generic';\n\nimport { PowerPriceState, TibberUsageState, TibberRealtimeState } from '../types/tibber';\nimport { SolarCurrent, SolarMax } from '../types/solar';\n\nconst defaultLatitude = 59.9409;\nconst defaultLongitude = 10.6991;\ninterface Props {\n  initState: InitState;\n  realtimePowerHjemme: TibberRealtimeState;\n  realtimePowerHytta: TibberRealtimeState;\n  currentSolarProduction: SolarCurrent;\n  latitude: number;\n  longitude: number;\n  usedPower: TibberUsageState;\n  powerPrices: PowerPriceState;\n  max: SolarMax;\n  updaters: { tibber: TibberUpdater; solar: SolarUpdater };\n}\n\nclass Solceller extends React.PureComponent<Props, GenericProps> {\n  private interval = 0;\n  public static defaultProps = {\n    latitude: defaultLatitude,\n    longitude: defaultLongitude,\n  };\n\n  public componentDidMount() {\n    const { tibber, solar } = this.props.updaters;\n    tibber.updatePowerPrices();\n    tibber.subscribeToRealTime('2b05f8c5-3241-465d-92b8-9e7ad567f78f', 'hjemme');\n    tibber.subscribeToRealTime('61f93ce4-f15c-49c2-aac1-9d9f0e1d76bb', 'hytta');\n    tibber.updateConsumption();\n    // tibber.updateConsumptionMonthlyAndCalculateBills();\n    tibber.updateConsumptionDaily();\n    this.interval = window.setInterval(() => tibber.updateConsumption(), 60 * 1000); // Every minute\n    solar.attachListeners();\n    solar.attachMaxListeners();\n  }\n\n  public componentWillUnmount() {\n    window.clearInterval(this.interval);\n  }\n\n  public render() {\n    if (!this.props.initState.solar) return null;\n\n    // Regne ut felles verdier.\n    const currentNetConsumption = this.props.realtimePowerHjemme.calculatedConsumption; // Find actual current usage\n\n    // Regne ut felles verdier.\n    const currentNetConsumptionHytta = this.props.realtimePowerHytta.calculatedConsumption; // Find actual current usage\n\n    const currentNetConsumptionTotal = currentNetConsumption + currentNetConsumptionHytta;\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flex: 1,\n          flexDirection: 'column',\n          height: '100%',\n        }}\n      >\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            marginBottom: 20,\n          }}\n        >\n          <TellulfInfoCell\n            info={currentNetConsumptionTotal}\n            header=\"Totalt nå\"\n            large\n            smartRoundKw\n            key=\"currentConsumption\"\n            unit=\"W\"\n          />\n          <TellulfInfoCell\n            info={currentNetConsumption}\n            header=\"Hus nå\"\n            large\n            smartRoundKw\n            key=\"currentConsumptionHome\"\n            unit=\"W\"\n          />\n          <TellulfInfoCell\n            info={currentNetConsumptionHytta}\n            header=\"Hytta nå\"\n            large\n            smartRoundKw\n            key=\"currentConsumptionHytta\"\n            unit=\"W\"\n          />\n        </div>\n        <div style={{ display: 'flex', alignItems: 'center', marginBottom: 20 }}>\n          <EnergyGraph\n            latitude={this.props.latitude}\n            longitude={this.props.longitude}\n            usedPower={this.props.usedPower}\n            realtimePower={this.props.realtimePowerHjemme}\n            initState={this.props.initState}\n            powerPrices={this.props.powerPrices}\n            max={this.props.max}\n            currentSolarProduction={this.props.currentSolarProduction}\n            currentNetConsumption={currentNetConsumption}\n          />\n        </div>\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <TallPanel\n            currentSolarProduction={this.props.currentSolarProduction}\n            max={this.props.max}\n            realtimePower={this.props.realtimePowerHjemme}\n            realtimePowerHytta={this.props.realtimePowerHytta}\n            currentNetConsumption={currentNetConsumption}\n          />\n        </div>\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <MaxEnergyGraph\n            day={this.props.max.maxDay}\n            year={this.props.max.maxYear}\n            month={this.props.max.maxMonth}\n            ever={this.props.max.maxEver}\n            currentProduction={this.props.currentSolarProduction.now}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppStore) => {\n  return {\n    currentSolarProduction: state.Solar.current,\n    max: state.Solar.max,\n    powerPrices: state.PowerPrices,\n    initState: state.Init,\n    realtimePowerHjemme: state.TibberRealTime.hjemme,\n    realtimePowerHytta: state.TibberRealTime.hytta,\n    usedPower: state.TibberLastDay,\n  };\n};\n\nexport default connect(mapStateToProps)(Solceller);\n","import firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/auth';\n\nconst config = {\n  apiKey: 'AIzaSyBIJfOzVFrazxX9FkLEOHcf2dKeewXBCpI',\n  authDomain: 'tellulf-151318.firebaseapp.com',\n  databaseURL: 'https://tellulf-151318.firebaseio.com',\n  projectId: 'tellulf-151318',\n  storageBucket: 'tellulf-151318.appspot.com',\n  messagingSenderId: '159155087298',\n};\n\nconst fire = firebase.initializeApp(config);\n\nexport default fire;\n","import React from 'react';\nimport Moment from 'moment';\nimport { Event } from '../types/calendar';\nimport './kalender.css';\nimport { GenericProps } from '../types/generic';\n\nfunction fullDayFormats() {\n  return {\n    lastWeek: 'dddd DD.',\n    nextWeek: 'dddd',\n    sameDay: '[I dag]',\n    nextDay: '[I morgen]',\n    sameElse: 'DD. MMM',\n  };\n}\n\nfunction normalFormats() {\n  return {\n    sameDay: 'HH:mm',\n    nextDay: '[I morgen] HH:mm',\n    nextWeek: 'dddd HH:mm',\n    sameElse: 'ddd DD. HH:mm',\n  };\n}\n\nfunction normalDayToFormats() {\n  return {\n    sameDay: 'HH:mm',\n    nextDay: 'HH:mm',\n    nextWeek: 'HH:mm',\n    sameElse: 'HH:mm',\n  };\n}\n\nexport function getTimeString(event: Event): string {\n  let timeString = '';\n  if (event.fullDay) {\n    // Full day events\n    if (!event.oneDay) {\n      timeString = Moment(event.start).calendar(undefined, fullDayFormats());\n      // subtract one, as we only want the last included day\n      const newEnd = Moment(event.end);\n      newEnd.subtract(1, 'day');\n      timeString += ` → ${Moment(newEnd).calendar(undefined, fullDayFormats())}`;\n    }\n  } else {\n    let toFormats = normalDayToFormats();\n    if (!event.oneDay) {\n      toFormats = normalFormats();\n    }\n    timeString = `${Moment(event.start).calendar(undefined, normalDayToFormats())} → ${Moment(\n      event.end,\n    ).calendar(undefined, toFormats)}`;\n  }\n  return timeString;\n}\n\ninterface Props {\n  data: Event;\n}\n\nclass HendelseMedTid extends React.PureComponent<Props, GenericProps> {\n  public render(): React.ReactNode {\n    return (\n      <div className=\"kalenderSubInfo\">\n        <div>{this.props.data.name}</div>\n        <div>{getTimeString(this.props.data)}</div>\n      </div>\n    );\n  }\n}\n\nexport default HendelseMedTid;\n","import React from 'react';\nimport { getTimeString } from './HendelseMedTid';\nimport { Event } from '../types/calendar';\nimport { GenericProps } from '../types/generic';\n\nimport './kalender.css';\n\ninterface Props {\n  data: Event;\n}\n\nclass HendelseFullDag extends React.PureComponent<Props, GenericProps> {\n  public render(): React.ReactNode {\n    return (\n      <div className=\"kalenderSubInfo\">\n        <div>{this.props.data.name}</div>\n        {!this.props.data.oneDay && <div>{getTimeString(this.props.data)}</div>}\n      </div>\n    );\n  }\n}\n\nexport default HendelseFullDag;\n","import React from 'react';\nimport { GenericProps } from '../types/generic';\n\nconst baseUrl = '/weather_symbols';\n\ninterface Props {\n  payload: { time: number; symbol: string; temp: number };\n  cx: number;\n  cy: number;\n}\n\nclass WeatherIcon extends React.PureComponent<Props, GenericProps> {\n  private width = 0;\n  public static defaultProps = {\n    cx: undefined,\n    cy: undefined,\n    payload: undefined,\n  };\n\n  public constructor(props: Props) {\n    super(props);\n    this.width = window.innerWidth;\n  }\n\n  private getIconLocation() {\n    const icon = `${baseUrl}/${this.props.payload.symbol}.png`;\n    return icon;\n  }\n\n  private getTemp() {\n    const temp = Math.round(this.props.payload.temp);\n    return temp;\n  }\n\n  public render(): React.ReactNode {\n    if (isNaN(this.props.payload.temp) || typeof this.props.payload.symbol === 'undefined') {\n      return null;\n    }\n    if (this.width <= 600) {\n      const d = new Date(this.props.payload.time);\n      if (d.getHours() % 2 !== 0) return null;\n    }\n    return (\n      <svg>\n        <text\n          x={this.props.cx}\n          y={this.props.cy + 20}\n          textAnchor=\"middle\"\n          fontFamily=\"sans-serif\"\n          fontSize=\"13px\"\n          fill=\"#ffffff99\"\n        >\n          {this.getTemp()}\n        </text>\n        <image\n          href={this.getIconLocation()}\n          x={this.props.cx - 13}\n          y={this.props.cy - 15}\n          height=\"26px\"\n          width=\"26px\"\n          opacity={1}\n        />\n        )\n      </svg>\n    );\n  }\n}\n\nexport default WeatherIcon;\n","import Moment from 'moment';\n\n/**\n* Calculates Easter in the Gregorian/Western (Catholic and Protestant) calendar\n* based on the algorithm by Oudin (1940) from http://www.tondering.dk/claus/cal/easter.php\n* @returns {array} [int month, int day]\n*/\n\n\n/* eslint-disable */\n/**\n* Calculates Easter in the Gregorian/Western (Catholic and Protestant) calendar \n* based on the algorithm by Oudin (1940) from http://www.tondering.dk/claus/cal/easter.php\n* @returns {array} [int month, int day]\n*/\nexport function getEaster(year) {\n\tvar f = Math.floor,\n\t\t// Golden Number - 1\n\t\tG = year % 19,\n\t\tC = f(year / 100),\n\t\t// related to Epact\n\t\tH = (C - f(C / 4) - f((8 * C + 13)/25) + 19 * G + 15) % 30,\n\t\t// number of days from 21 March to the Paschal full moon\n\t\tI = H - f(H/28) * (1 - f(29/(H + 1)) * f((21-G)/11)),\n\t\t// weekday for the Paschal full moon\n\t\tJ = (year + f(year / 4) + I + 2 - C + f(C / 4)) % 7,\n\t\t// number of days from 21 March to the Sunday on or before the Paschal full moon\n\t\tL = I - J,\n\t\tmonth = 3 + f((L + 40)/44),\n\t\tday = L + 28 - 31 * f(month / 4);\n\n\treturn [month,day];\n}\n/* eslint-enable */\n\nexport function getNorwegianDaysOff(year = new Date().getFullYear()) {\n  const days = [];\n  days.push('0501'); // 1. mai\n  days.push('1225'); // 1. juledag\n  days.push('1226'); // 1. juledag\n  days.push('0101'); // 1. nyttårsdag\n  days.push('0517'); // 17. mai\n\n  // All the eastery stuff\n  const e = getEaster(year);\n  const arr = [year, e[0] - 1, e[1]];\n  const eMoment = Moment(arr);\n  days.push(Moment(eMoment).subtract(3, 'days').format('MMDD')); // Torsdag\n  days.push(Moment(eMoment).subtract(2, 'days').format('MMDD')); // Fredag\n  days.push(Moment(eMoment).add(1, 'days').format('MMDD')); // 1. påskedag\n  days.push(Moment(eMoment).add(39, 'days').format('MMDD')); // Himmelsprett\n  days.push(Moment(eMoment).add(50, 'days').format('MMDD')); // 1. pinsedag\n\n  days.sort();\n  return days;\n}\n","import Moment from 'moment';\nimport store from 'store';\nimport maxBy from 'lodash/maxBy';\nimport minBy from 'lodash/minBy';\nimport sumBy from 'lodash/sumBy';\nimport pickBy from 'lodash/pickBy';\nimport { getNorwegianDaysOff } from '../external';\nimport { WeatherDataSeries, HourForecast, ForecastDataSet, WeatherLimits } from '../types/forecast';\n\nconst sundayColor = '#FF0000CC';\nconst redDays = getNorwegianDaysOff();\nconst gridColor = '#FFFFFFAA';\n\nexport function getTimeLimits(days = 3): { start: Moment.Moment; end: Moment.Moment } {\n  const start = Moment().startOf('day');\n  const end = Moment().add(days, 'day').startOf('day');\n  return { start, end };\n}\n\nexport function getDayColor(time: Moment.Moment): string {\n  if (time.day() === 0 || time.day() === 6) return sundayColor;\n  const dString = time.format('MMDD');\n  if (redDays.includes(dString)) return sundayColor;\n  return gridColor;\n}\n\nexport function formatTick(data: number): string {\n  const time = Moment(data, 'x');\n  return time.format('HH');\n}\n\nexport function createKeyBasedOnStamps(from: string, to: string): string {\n  const f = Moment(from);\n  const t = Moment(to);\n  const key = `${f.toISOString()}->${t.toISOString()}`;\n  return key;\n}\n\n// Store a weather data set to localstore, filtered on time. Must have a time key in object, that is a momentish thing!\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function storeToLocalStore(\n  key: string,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any,\n  from: Moment.Moment | string,\n  to: Moment.Moment | string,\n): void {\n  const toStore = {};\n  Object.keys(data).forEach((k) => {\n    const d = data[k];\n    if (!d.time) return;\n    if (Moment(d.time).isBetween(from, to, undefined, '[]')) {\n      toStore[k] = d;\n    }\n  });\n  store.set(key, toStore);\n}\n\nexport function createForecastSummary(data: WeatherDataSeries): string {\n  const weather = Object.values(data);\n  if (weather.length === 0) return '';\n  const maxTemp = maxBy(weather, (w: HourForecast): number => {\n    return w.temp ? w.temp : -999;\n  });\n  const minTemp = minBy(weather, (w: HourForecast): number => {\n    return w.temp ? w.temp : 999;\n  });\n\n  const rain = sumBy(weather, (w: HourForecast): number => {\n    if (!w.rain) return 0;\n    return w.rain;\n  });\n\n  const maxT = maxTemp && maxTemp.temp ? Math.round(maxTemp.temp) : undefined;\n  const minT = minTemp && minTemp.temp ? Math.round(minTemp.temp) : undefined;\n  const r = Math.round(rain);\n\n  if (!maxT || !minT) {\n    return '';\n  }\n\n  return `${minT}/${maxT} ${r}mm`;\n}\n\nexport function filterForecastData(\n  date: Moment.Moment,\n  weather: WeatherDataSeries,\n  hoursBefore = 0,\n  hoursAfter = 0,\n): WeatherDataSeries {\n  const from = Moment(date).startOf('day').subtract(hoursBefore, 'h');\n  const to = Moment(date).endOf('day').add(hoursAfter, 'h');\n\n  const filtered: WeatherDataSeries = pickBy(weather, (a) => {\n    if (!a.symbol && !a.temp) return false;\n    return Moment(a.time).isBetween(from, to);\n  });\n\n  return filtered;\n}\n\n// Calculate global limits\nexport function parseLimits(d: ForecastDataSet): WeatherLimits {\n  // Merge the datasets\n  const points: HourForecast[] = [];\n  Object.values(d).forEach((s) => {\n    Object.values(s.forecast).forEach((v: HourForecast) => {\n      points.push(v);\n    });\n  });\n\n  // Calculate the limits\n  const maxTempPoint = maxBy(points, 'temp');\n  const maxRainPoint = maxBy(points, 'rainMax');\n  const minTempPoint = minBy(points, 'temp');\n\n  const minTemp = minTempPoint && minTempPoint.temp ? minTempPoint.temp : 0;\n  const maxTemp = maxTempPoint && maxTempPoint.temp ? maxTempPoint.temp : 0;\n  const maxRain = maxRainPoint && maxRainPoint.rainMax ? maxRainPoint.rainMax : 0;\n\n  const roundedMin = Math.floor((minTemp - 2) / 10) * 10;\n  const roundedMax = Math.ceil((maxTemp + 2) / 10) * 10;\n\n  const lowerRange = minTemp > 0 ? 0 : Math.min(0, roundedMin);\n  const upperRange = Math.max(lowerRange + 30, roundedMax);\n\n  const ticks: number[] = [];\n  for (let i = lowerRange; i <= upperRange; i += 10) {\n    ticks.push(i);\n  }\n\n  return {\n    minTemp,\n    maxTemp,\n    maxRain,\n    lowerRange,\n    upperRange,\n    ticks,\n  };\n}\n","import React from 'react';\nimport Moment from 'moment';\nimport {\n  ComposedChart,\n  Line,\n  XAxis,\n  YAxis,\n  Area,\n  Label,\n  CartesianGrid,\n  ReferenceLine,\n  ReferenceArea,\n  ResponsiveContainer,\n  RechartsFunction,\n} from 'recharts';\nimport WeatherIcon from './WeatherIcon';\nimport { WeatherLimits, WeatherDataSeries } from '../types/forecast';\nimport { formatTick } from './weatherHelpers';\nimport './yr.css';\n\nconst colors = {\n  grid: '#FFFFFF33',\n  cold: '#0000FF44',\n  rain: '#8884d8',\n  temperature: '#FF000088',\n  updated: '#FFFF0022',\n};\n\ninterface Props {\n  weather: WeatherDataSeries;\n  from: Moment.Moment;\n  to: Moment.Moment;\n  sted: string;\n  showPlace: boolean;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  onClick: Function;\n  limits: WeatherLimits;\n  weatherUpdated: Moment.Moment;\n}\n\ninterface State {\n  currentTime: number;\n}\n\nclass WeatherGraph extends React.PureComponent<Props, State> {\n  public state: State;\n  private interval = 0;\n\n  public static defaultProps = {\n    limits: undefined,\n    showPlace: false,\n    onClick: () => {\n      return null;\n    },\n  };\n\n  public constructor(props: Props) {\n    super(props);\n    this.state = { currentTime: Moment().valueOf() };\n  }\n\n  public componentDidMount(): void {\n    this.interval = window.setInterval(() => this.reloadTime(), 60000); // Reload time every minute\n  }\n\n  public componentWillUnmount(): void {\n    window.clearInterval(this.interval);\n  }\n\n  private reloadTime() {\n    this.setState({ currentTime: Moment().valueOf() });\n  }\n\n  // Stays on\n  public render(): React.ReactNode {\n    const startTime = this.props.from.valueOf();\n    const endTime = this.props.to.valueOf();\n    return (\n      <ResponsiveContainer height={200} width=\"100%\">\n        <ComposedChart\n          margin={{\n            top: 0,\n            right: 0,\n            left: 0,\n            bottom: 0,\n          }}\n          data={Object.values(this.props.weather)}\n          onClick={this.props.onClick as RechartsFunction}\n        >\n          <XAxis\n            scale=\"time\"\n            dataKey=\"time\"\n            type=\"number\"\n            tickFormatter={formatTick}\n            domain={[startTime, endTime]}\n            allowDataOverflow\n          />\n          <YAxis\n            width={25}\n            yAxisId=\"temp\"\n            type=\"number\"\n            ticks={this.props.limits.ticks}\n            domain={[this.props.limits.lowerRange, this.props.limits.upperRange]}\n            hide\n          />\n          <YAxis\n            width={25}\n            label={{\n              angle: 90,\n              value: 'mm',\n              stroke: '#ffffff55',\n              fill: '#ffffff55',\n              fontSize: 15,\n              position: 'left',\n            }}\n            yAxisId=\"rain\"\n            allowDataOverflow\n            type=\"number\"\n            orientation=\"right\"\n            domain={[0, 1.5]}\n            hide\n          />\n          <CartesianGrid stroke={colors.grid} vertical={false} />\n          {this.props.limits.lowerRange < 0 && (\n            <ReferenceArea\n              y1={0}\n              y2={this.props.limits.lowerRange}\n              yAxisId=\"temp\"\n              stroke=\"#00000000\"\n              fill={colors.cold}\n            />\n          )}\n          <Area\n            dot={false}\n            yAxisId=\"rain\"\n            connectNulls={true}\n            type=\"natural\"\n            dataKey=\"rain\"\n            stroke={colors.rain}\n            fillOpacity=\"0.3\"\n            isAnimationActive={false}\n          />\n          <Line\n            dot={false}\n            yAxisId=\"rain\"\n            connectNulls={true}\n            type=\"natural\"\n            dataKey=\"rainMin\"\n            stroke={colors.rain}\n            strokeDasharray=\"2 2\"\n            isAnimationActive={false}\n          />\n          <Line\n            dot={false}\n            yAxisId=\"rain\"\n            connectNulls={true}\n            type=\"natural\"\n            dataKey=\"rainMax\"\n            stroke={colors.rain}\n            strokeDasharray=\"2 2\"\n            isAnimationActive={false}\n          />\n          <Line\n            dot={<WeatherIcon />}\n            yAxisId=\"temp\"\n            type=\"natural\"\n            dataKey=\"temp\"\n            stroke=\"#ffffff\"\n            opacity={0.5}\n            strokeWidth={1}\n            isAnimationActive={false}\n            connectNulls={true}\n          />\n          <ReferenceLine\n            yAxisId=\"temp\"\n            x={this.state.currentTime}\n            stroke={colors.temperature}\n            strokeWidth={3}\n            strokeDasharray=\"3 3\"\n          />\n          <ReferenceLine\n            yAxisId=\"temp\"\n            x={this.props.weatherUpdated.valueOf()}\n            stroke={colors.updated}\n            strokeWidth={3}\n            strokeDasharray=\"3 3\"\n          />\n          {this.props.showPlace && <Label value={this.props.sted} />}\n        </ComposedChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n\nexport default WeatherGraph;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Moment from 'moment';\nimport Preggo from 'pregnancy';\nimport store from 'store';\nimport maxBy from 'lodash/maxBy';\nimport { AppStore } from '../redux/reducers';\nimport HendelseFullDag from './HendelseFullDag';\nimport HendelseMedTid from './HendelseMedTid';\nimport WeatherGraph from '../weather/WeatherGraph';\nimport { createForecastSummary, filterForecastData } from '../weather/weatherHelpers';\nimport { Event, EventDataSet } from '../types/calendar';\nimport './kalender.css';\nimport { ForecastStore, WeatherDataSeries, HourForecast } from '../types/forecast';\n\ninterface Props {\n  dinner: EventDataSet;\n  birthdays: EventDataSet;\n  events: EventDataSet;\n  date: Moment.Moment;\n  forecast: ForecastStore;\n}\n\ninterface State {\n  sted: string;\n}\n\n// CHeck if we have a full dataset for the day\nfunction showWeatherGraphForDay(day: Moment.Moment, data: WeatherDataSeries): boolean {\n  const weather = Object.values(data);\n  if (weather.length === 0) return false;\n  const endOfDay = Moment(day).endOf('day');\n  const lastKnown: HourForecast = maxBy(weather, 'time');\n  const lastMoment = Moment(lastKnown.time);\n  return lastMoment.isAfter(endOfDay);\n}\n\nfunction getDayHeader(date: Moment.Moment) {\n  return date.format('dddd D.');\n}\n\nclass Dag extends React.PureComponent<Props, State> {\n  private togglePlace: () => void;\n\n  public constructor(props: Props) {\n    super(props);\n    this.state = { sted: this.loadSted() };\n    this.togglePlace = (): void => {\n      const sted = this.loadSted();\n      const nyttSted = sted === 'oslo' ? 'sandefjord' : 'oslo';\n      store.set(`sted_${this.props.date}`, nyttSted);\n      this.setState({ sted: nyttSted });\n    };\n  }\n\n  private loadSted(): string {\n    const sted = store.get(`sted_${this.props.date}`, 'oslo');\n    return sted;\n  }\n\n  private getDinner() {\n    try {\n      if (!this.props.dinner || !this.props.dinner.events) return null;\n      return (\n        <div className=\"kalenderSubInfo\">\n          <img\n            src=\"dinner.png\"\n            width={15}\n            height={15}\n            alt=\"Dinner\"\n            style={{ filter: 'invert(100%)', marginRight: 5 }}\n          />\n          {this.props.dinner.events[0].name}\n        </div>\n      );\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.log(err);\n      return null;\n    }\n  }\n\n  private getBirthdays(): JSX.Element[] {\n    if (!this.props.birthdays || !this.props.birthdays.events) return [];\n    const out: JSX.Element[] = [];\n    try {\n      this.props.birthdays.events.forEach((b: Event) => {\n        const matches = b.name.match(/\\d+$/);\n        // eslint-disable-next-line prefer-destructuring\n        let name = b.name;\n        if (matches) {\n          const number = parseInt(matches[0], 10);\n          const age = new Date().getFullYear() - number;\n          name = name.substring(0, name.length - 5);\n          name = `${name} (${age})`;\n        }\n        out.push(\n          <div className=\"kalenderSubInfo\" key={b.id}>\n            <img\n              src=\"kake.png\"\n              width={15}\n              height={15}\n              alt=\"Kake\"\n              style={{ filter: 'invert(100%)', marginRight: 5 }}\n            />\n            {name}\n          </div>,\n        );\n      });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.log(err);\n    }\n    return out;\n  }\n\n  private getEvents(): JSX.Element[] {\n    if (!this.props.events || !this.props.events.events) return [];\n    const out: JSX.Element[] = [];\n\n    try {\n      const events = this.props.events.events.sort((a: Event, b: Event) => {\n        return a.start.isBefore(b.start) ? -1 : 1;\n      });\n\n      events.forEach((e: Event) => {\n        if (e.fullDay) {\n          out.push(<HendelseFullDag key={e.id} data={e} />);\n        } else {\n          out.push(<HendelseMedTid key={e.id} data={e} />);\n        }\n      });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.log(err);\n    }\n    return out;\n  }\n\n  private filterForecast(): WeatherDataSeries {\n    if (!this.props.forecast.data || !this.props.forecast.data[this.state.sted]) {\n      return {};\n    }\n\n    return filterForecastData(\n      this.props.date,\n      this.props.forecast.data[this.state.sted].forecast,\n      6,\n      6,\n    );\n  }\n\n  private getForecastSummary(): string {\n    return createForecastSummary(this.filterForecast());\n  }\n\n  private getWeatherUpdateTime(): Moment.Moment {\n    return this.props.forecast.data[this.state.sted].updated;\n  }\n\n  private getPreggo(): string {\n    const p = new Preggo(new Date('2020-07-22'));\n    const d = p.getData(this.props.date.toDate());\n    return `${d.percent.toFixed(1)}% - uke ${d.week} dag ${d.dayOfWeek} - ${d.weight}g - ${\n      d.height\n    } cm`;\n  }\n\n  private getWeather(date: Moment.Moment, sted: string) {\n    const forecast = this.filterForecast();\n\n    if (!showWeatherGraphForDay(this.props.date, forecast)) return null;\n\n    const from = Moment(date).startOf('day');\n    const to = Moment(date).add(1, 'day');\n\n    return (\n      <WeatherGraph\n        weather={forecast}\n        from={from}\n        to={to}\n        weatherUpdated={this.getWeatherUpdateTime()}\n        sted={sted}\n        showPlace={sted !== 'oslo'}\n        onClick={this.togglePlace}\n        limits={this.props.forecast.limits}\n      />\n    );\n  }\n\n  public render(): React.ReactNode {\n    const stedToShow = this.state.sted !== 'oslo' ? this.state.sted.toLocaleUpperCase() : null;\n\n    return (\n      <div className=\"kalenderDag\">\n        <div className=\"kalenderDato\">{getDayHeader(this.props.date)}</div>\n        <div className=\"kalenderDato weatherSummary\">{this.getForecastSummary()}</div>\n        <div\n          style={{ gridColumn: '1 / 3', gridRow: '2 / 4', display: 'flex', alignItems: 'flex-end' }}\n        >\n          {this.getWeather(this.props.date, this.state.sted)}\n        </div>\n        <div className=\"kalenderSted\">{stedToShow}</div>\n        <div className=\"kalendarDayInfo\">\n          <div className=\"preggo\">{this.getPreggo()}</div>\n          {this.getBirthdays()}\n          {this.getDinner()}\n          {this.getEvents()}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: AppStore) {\n  return {\n    forecast: state.Forecast,\n  };\n}\n\n// export default Dag;\nexport default connect(mapStateToProps)(Dag);\n","/* eslint-disable @typescript-eslint/ban-types */\nimport Moment from 'moment';\nimport Axios from 'axios';\nimport IcalExpander from 'ical-expander';\nimport { Event, IcalParseResult, CalendarDay } from '../types/calendar';\n\ninterface APIEvent {\n  startDate: {\n    toJSDate: Function;\n    hour: number;\n    day: number;\n  };\n  endDate: {\n    toJSDate: Function;\n    hour: number;\n    day: number;\n  };\n  item?: {\n    summary: string;\n    uid: string;\n    startDate: {\n      toJSDate: Function;\n      hour: number;\n      day: number;\n    };\n    endDate: {\n      toJSDate: Function;\n      hour: number;\n      day: number;\n    };\n  };\n  summary?: string;\n  uid?: string;\n}\n\nexport function initDay(sortString: string): CalendarDay {\n  return {\n    events: [],\n    sortString,\n    sortStamp: Number(Moment(sortString, 'YYYY-MM-DD').format('x')),\n  };\n}\n\nexport function parseIcalEvent(e: APIEvent): Event {\n  try {\n    const now = Moment();\n    const start = Moment(e.startDate.toJSDate());\n    const end = Moment(e.endDate.toJSDate());\n\n    let name = 'shiiiiit';\n    if (e.item && e.item.summary) {\n      name = e.item.summary;\n    } else if (e.summary) {\n      name = e.summary;\n    }\n\n    const fullDay =\n      e.startDate.hour === 0 && e.endDate.hour === 0 && e.endDate.day !== e.startDate.day;\n\n    let oneDay = true;\n    if (fullDay) {\n      if (Moment(end).subtract(1, 'day').startOf('day').isAfter(Moment(start).startOf('day')))\n        oneDay = false;\n    }\n\n    if (!fullDay) {\n      oneDay = start.isSame(end, 'day');\n    }\n\n    let groupString = start.format('YYYY-MM-DD');\n    const startsBeforeToday = start.isBefore(now, 'day');\n    if (startsBeforeToday) {\n      groupString = now.format('YYYY-MM-DD');\n    }\n\n    let id = 'shiiiit';\n    if (e.uid) {\n      id = e.uid;\n    } else if (e.item && e.item.uid) {\n      id = e.item.uid;\n    }\n\n    return {\n      id,\n      name,\n      start,\n      end,\n      fullDay,\n      oneDay,\n      groupString,\n    };\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.log(err);\n    throw new Error('Could not parse iCal event');\n  }\n}\n\ninterface SortEvent {\n  item: { startDate: { toJSDate: Function } };\n}\ninterface SortOccurrence {\n  startDate: { toJSDate: Function };\n}\n\nexport async function getIcal(url: string): Promise<IcalParseResult> {\n  const parsedEvents: { [s: string]: CalendarDay } = {};\n  try {\n    const now = Moment();\n    const data = await Axios.get(url);\n\n    if (data.status !== 200) throw Error('Couldnt fetch calendar data');\n\n    const icalExpander = new IcalExpander({ ics: data.data, maxIterations: 1000 });\n    const events = icalExpander.between(now.toDate(), now.add(60, 'days').toDate());\n\n    const sorted: {\n      events: APIEvent[];\n      occurrences: APIEvent[];\n    } = { events: [], occurrences: [] };\n\n    sorted.events = events.events.sort((a: SortOccurrence, b: SortOccurrence) => {\n      const start = a.startDate.toJSDate();\n      const end = b.startDate.toJSDate();\n      return start - end;\n    });\n\n    sorted.occurrences = events.occurrences.sort((a: SortEvent, b: SortEvent) => {\n      const start = a.item.startDate.toJSDate();\n      const end = b.item.startDate.toJSDate();\n      return start - end;\n    });\n\n    sorted.occurrences.forEach((e: APIEvent) => {\n      try {\n        const event = parseIcalEvent(e);\n        if (!parsedEvents[event.groupString]) {\n          parsedEvents[event.groupString] = initDay(event.groupString);\n        }\n        parsedEvents[event.groupString].events.push(event);\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.log(err);\n      }\n    });\n\n    sorted.events.forEach((e: APIEvent) => {\n      try {\n        const event = parseIcalEvent(e);\n        if (!parsedEvents[event.groupString]) {\n          parsedEvents[event.groupString] = initDay(event.groupString);\n        }\n        parsedEvents[event.groupString].events.push(event);\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.log(err);\n      }\n    });\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.log(err);\n  }\n\n  return parsedEvents;\n}\n","import React from 'react';\nimport Moment from 'moment';\nimport Dag from './Dag';\n\nimport { getIcal } from './kalenderHelpers';\nimport { IcalParseResult } from '../types/calendar';\n\nconst proxy = 'https://us-central1-tellulf-151318.cloudfunctions.net/proxy';\n\nconst calUrl =\n  'https://calendar.google.com/calendar/ical/kvasbo.no_ognucfh1asvpgc50mqms5tu0kk%40group.calendar.google.com/private-7020f002efde8095cc911279983fb92a/basic.ics';\n\nconst dinnerUrl =\n  'https://calendar.google.com/calendar/ical/kvasbo.no_m3le0buqs8k24ljlumcr1goqqs%40group.calendar.google.com/private-43f7d258dce12c6117d133b621318148/basic.ics';\n\nconst birthdayUrl =\n  'https://calendar.google.com/calendar/ical/kvasbo.no_upelraeuo31neuoq31f9decudg%40group.calendar.google.com/private-6718a3a9f7b74d60372a3f2be75804d6/basic.ics';\n\nconst cal = encodeURIComponent(calUrl);\nconst dinner = encodeURIComponent(dinnerUrl);\nconst birthday = encodeURIComponent(birthdayUrl);\n\nconst calP = `${proxy}/?url=${cal}`;\nconst dinP = `${proxy}/?url=${dinner}`;\nconst bdP = `${proxy}/?url=${birthday}`;\n\ninterface State {\n  kalenderData: IcalParseResult;\n  birthdays: IcalParseResult;\n  dinners: IcalParseResult;\n}\n\nclass Kalender extends React.PureComponent<unknown, State> {\n  private interval = 0;\n  public constructor(props = {}) {\n    super(props);\n    this.state = {\n      kalenderData: {},\n      dinners: {},\n      birthdays: {},\n    };\n  }\n\n  public componentDidMount(): void {\n    this.updateData();\n    this.interval = window.setInterval(() => this.updateData(), 1000 * 60);\n  }\n\n  public componentWillUnmount(): void {\n    window.clearInterval(this.interval);\n  }\n\n  private getDays() {\n    const out: JSX.Element[] = [];\n    const start = Moment().startOf('day');\n    const now = start.clone();\n    const days: Moment.Moment[] = [];\n\n    // Prime the data set\n    for (let i = 0; i < 30; i += 1) {\n      days.push(start.clone());\n      start.add(1, 'days');\n    }\n\n    days.forEach((day) => {\n      const d = day.format('YYYY-MM-DD');\n      const diff = day.diff(now, 'days');\n      const cald = this.state.kalenderData[d];\n      const birthdays = this.state.birthdays[d];\n      const dinners = this.state.dinners[d];\n\n      if (diff < 14 || cald || birthdays || dinners) {\n        out.push(\n          <Dag\n            key={`kalenderdag${d}`}\n            date={day}\n            events={cald}\n            dinner={dinners}\n            birthdays={birthdays}\n          />,\n        );\n      }\n    });\n    return out;\n  }\n\n  private async updateData() {\n    try {\n      const kalenderData = await getIcal(calP);\n      const dinners = await getIcal(dinP);\n      const birthdays = await getIcal(bdP);\n\n      this.setState({ kalenderData, dinners, birthdays });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.log(err);\n    }\n  }\n\n  public render(): React.ReactNode {\n    return <div style={{ flex: 1, overflow: 'auto' }}>{this.getDays()}</div>;\n  }\n}\n\nexport default Kalender;\n","import axios from 'axios';\nimport Moment from 'moment';\nimport store from 'store';\nimport { getTimeLimits, storeToLocalStore } from './weatherHelpers';\nimport { YrResponse, YrWeatherDataset } from '../types/yr';\nimport { WeatherDataSeries, HourForecast, Forecast } from '../types/forecast';\n\nexport const localStorageKey = '12';\nconst weatherSeriesKey = 'weatherSeries';\n\n// New: Create a time stamp\nfunction createTimeKey(d: Date): number {\n  return Moment(d).add(30, 'minutes').startOf('hour').valueOf();\n}\n\n// New: Parse a data set\nfunction parseWeatherHour(d: YrWeatherDataset): HourForecast {\n  const out: HourForecast = { time: createTimeKey(d.time) };\n  out.temp = d.data.instant.details.air_temperature;\n\n  // Use hourly data\n  if (d.data.next_1_hours) {\n    out.rain = d.data.next_1_hours.details.precipitation_amount;\n    out.rainMin = d.data.next_1_hours.details.precipitation_amount_min;\n    out.rainMax = d.data.next_1_hours.details.precipitation_amount_max;\n    out.symbol = d.data.next_1_hours.summary.symbol_code;\n  } else if (d.data.next_6_hours) {\n    //... or six hours\n    out.rain = d.data.next_6_hours.details.precipitation_amount / 6;\n    out.rainMin = d.data.next_6_hours.details.precipitation_amount_min / 6;\n    out.rainMax = d.data.next_6_hours.details.precipitation_amount_max / 6;\n    out.symbol = d.data.next_6_hours.summary.symbol_code;\n  }\n  return out;\n}\n\n// New\nfunction initWeatherSeries(days = 14): WeatherDataSeries {\n  const nOut: WeatherDataSeries = {};\n\n  const start = Moment().startOf('day').valueOf();\n  const diff = 1000 * 60 * 60; // an hour\n  const hours = days * 24;\n\n  for (let i = 0; i < hours; i++) {\n    const time = start + diff * i;\n    nOut[time] = { time };\n  }\n\n  // Get from storage\n  const fromStore: WeatherDataSeries = store.get(`${weatherSeriesKey}_${localStorageKey}`);\n\n  // Get data from stored set if time is in initialised set.\n  if (fromStore) {\n    Object.values(nOut).forEach((k) => {\n      if (fromStore[k.time]) {\n        nOut[k.time] = fromStore[k.time];\n      }\n    });\n  }\n\n  return nOut;\n}\n\nexport async function getForecastFromYr(lat: number, lon: number): Promise<Forecast> {\n  // Use the new shiny API!\n  const { start, end } = getTimeLimits(14);\n  const url = `https://api.met.no/weatherapi/locationforecast/2.0/complete?lat=${lat.toString()}&lon=${lon.toString()}`;\n  const nResponse = await axios.get(url);\n  if (nResponse.statusText !== 'OK') {\n    throw Error('Could not fetch Yr data');\n  }\n  // The new API data set\n  const nData: YrResponse = nResponse.data;\n\n  const forecast: Forecast = {\n    forecast: initWeatherSeries(),\n    lat,\n    lon,\n    updated: Moment(nData.properties.meta.updated_at),\n  };\n\n  nData.properties.timeseries.forEach((d) => {\n    const key = createTimeKey(d.time);\n    forecast.forecast[key] = parseWeatherHour(d);\n  });\n\n  storeToLocalStore(`${weatherSeriesKey}_${localStorageKey}`, forecast.forecast, start, end);\n  return forecast;\n}\n","import axios from 'axios';\nimport Moment from 'moment';\nimport XML from 'pixl-xml';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  TrainData,\n  TrainDataSet,\n  EnturApiData,\n  EnturTripData,\n  EnturCallData,\n} from '../types/trains';\n\n// Create link with unique requestor ID\nconst fetchId = uuidv4();\nconst ENTUR_URL = `https://api.entur.io/realtime/v1/rest/et?datasetId=RUT&requestorId=${fetchId}`;\nconst THE_STOP = 'NSR:Quay:11460';\n\n// Fetch Entur API data\nexport default async function getTrains(): Promise<TrainDataSet> {\n  const trains: TrainDataSet = {};\n  try {\n    const config = { headers: { 'ET-Client-Name': 'kvasbo - infoskjerm' } };\n    const data = await axios.get(ENTUR_URL, config);\n    if (data.status !== 200) throw Error('Couldnt fetch entur data');\n    const parsed: EnturApiData = XML.parse(data.data);\n    // Get the interesting data.\n    const actualData =\n      parsed.ServiceDelivery.EstimatedTimetableDelivery.EstimatedJourneyVersionFrame\n        .EstimatedVehicleJourney;\n    // Empty data set!\n    if (!actualData || !actualData.filter) return trains;\n    // Only the correct station and line\n    const filteredData = actualData.filter((t: EnturTripData) => {\n      return t.DirectionRef === '1' && t.LineRef === 'RUT:Line:1';\n    });\n    filteredData.forEach((t: EnturTripData) => {\n      // Kill bad datas\n      if (\n        !t.EstimatedCalls ||\n        !t.EstimatedCalls.EstimatedCall ||\n        !t.EstimatedCalls.EstimatedCall.length // not an array!\n      )\n        return;\n      t.EstimatedCalls.EstimatedCall.forEach((c: EnturCallData) => {\n        if (c.StopPointRef && c.StopPointRef !== THE_STOP) return;\n        const out: TrainData = {\n          ruteTid: Moment(c.AimedArrivalTime),\n          faktiskTid: Moment(c.ExpectedArrivalTime),\n          id: `${t.FramedVehicleJourneyRef.DataFrameRef}_${t.FramedVehicleJourneyRef.DatedVehicleJourneyRef}`,\n          linje: t.LineRef,\n          skalTil: c.DestinationDisplay,\n        };\n        trains[out.id] = out;\n      });\n    });\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.log(err);\n  }\n  return trains;\n}\n","import { getForecastFromYr } from '../weather/updateWeather';\nimport getTrains from '../ruter/updateTrains';\nimport { AppDispatch } from './store';\nimport { NetatmoStore } from './Netatmo';\nimport { NetatmoAverageData } from './NetatmoAverages';\nimport { Forecast } from '../types/forecast';\nimport { TrainDataSet } from '../types/trains';\nimport { SolarCurrent, SolarMaxData } from '../types/solar';\n\nimport {\n  PowerPriceState,\n  TibberRealtimeData,\n  TibberConsumptionNode,\n  TibberProductionNode,\n  houses,\n} from '../types/tibber';\n\nexport const UPDATE_FORECAST = 'UPDATE_FORECAST';\nexport const NETATMO_UPDATE = 'NETATMO_UPDATE';\nexport const NETATMO_UPDATE_AVERAGES = 'NETATMO_UPDATE_AVERAGES';\nexport const UPDATE_SOLAR_MAX = 'UPDATE_SOLAR_MAX';\nexport const UPDATE_SOLAR_CURRENT = 'UPDATE_SOLAR_CURRENT';\nexport const UPDATE_POWER_PRICES = 'UPDATE_POWER_PRICES';\nexport const UPDATE_INIT_STATUS = 'UPDATE_INIT_STATUS';\nexport const UPDATE_TRAINS = 'UPDATE_TRAINS';\nexport const UPDATE_TIBBER_REALTIME_CONSUMPTION = 'UPDATE_TIBBER_REALTIME_CONSUMPTION';\nexport const UPDATE_TIBBER_POWER_USAGE = 'UPDATE_TIBBER_POWER_USAGE';\nexport const UPDATE_TIBBER_USAGE_MONTH = 'UPDATE_TIBBER_USAGE_MONTH';\nexport const UPDATE_TIBBER_PRODUCTION_MONTH = 'UPDATE_TIBBER_PRODUCTION_MONTH';\n\nexport function updateInitStatus(\n  key: string,\n  value = true,\n): { type: 'UPDATE_INIT_STATUS'; key: string; value: boolean } {\n  return {\n    type: UPDATE_INIT_STATUS,\n    key,\n    value,\n  };\n}\n\nexport function updateTrains(\n  trains: TrainDataSet,\n): { type: 'UPDATE_TRAINS'; trains: TrainDataSet } {\n  return {\n    type: UPDATE_TRAINS,\n    trains,\n  };\n}\n\nexport function updateForecast(\n  data: Forecast,\n  sted: string,\n): { type: 'UPDATE_FORECAST'; data: Forecast; sted: string } {\n  return {\n    type: UPDATE_FORECAST,\n    data,\n    sted,\n  };\n}\n\nexport function updateTibberProductionMonth(\n  data: TibberProductionNode[],\n): { type: 'UPDATE_TIBBER_PRODUCTION_MONTH'; data: TibberProductionNode[] } {\n  return {\n    type: UPDATE_TIBBER_PRODUCTION_MONTH,\n    data,\n  };\n}\n\nexport function updateTibberConsumptionMonth(\n  data: TibberConsumptionNode[],\n): { type: 'UPDATE_TIBBER_USAGE_MONTH'; data: TibberConsumptionNode[] } {\n  return {\n    type: UPDATE_TIBBER_USAGE_MONTH,\n    data,\n  };\n}\n\nexport function updateRealtimeConsumption(\n  data: TibberRealtimeData,\n  where: houses,\n): { type: 'UPDATE_TIBBER_REALTIME_CONSUMPTION'; data: TibberRealtimeData; where: houses } {\n  return {\n    type: UPDATE_TIBBER_REALTIME_CONSUMPTION,\n    data,\n    where,\n  };\n}\n\nexport function updatePowerUsage(\n  data: TibberProductionNode[],\n): { type: 'UPDATE_TIBBER_POWER_USAGE'; data: TibberProductionNode[] } {\n  return {\n    type: UPDATE_TIBBER_POWER_USAGE,\n    data,\n  };\n}\n\nexport function updatePowerPrices(\n  data: PowerPriceState,\n): { type: 'UPDATE_POWER_PRICES'; data: PowerPriceState } {\n  return {\n    type: UPDATE_POWER_PRICES,\n    data,\n  };\n}\n\nexport function updateSolarMax(\n  data: SolarMaxData,\n): { type: 'UPDATE_SOLAR_MAX'; data: SolarMaxData } {\n  return {\n    type: UPDATE_SOLAR_MAX,\n    data,\n  };\n}\n\nexport function updateSolarCurrent(\n  data: SolarCurrent,\n): { type: 'UPDATE_SOLAR_CURRENT'; data: SolarCurrent } {\n  return {\n    type: UPDATE_SOLAR_CURRENT,\n    data,\n  };\n}\n\nexport function updateNetatmo(data: NetatmoStore): { type: 'NETATMO_UPDATE'; data: NetatmoStore } {\n  return {\n    type: NETATMO_UPDATE,\n    data,\n  };\n}\n\nexport function updateNetatmoAverages(\n  data: NetatmoAverageData,\n): { type: 'NETATMO_UPDATE_AVERAGES'; data: NetatmoAverageData } {\n  return {\n    type: NETATMO_UPDATE_AVERAGES,\n    data,\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function fetchTrains(): { (dispatch: AppDispatch): unknown } {\n  return (dispatch: AppDispatch): unknown => {\n    return getTrains().then((trains) => dispatch(updateTrains(trains)));\n  };\n}\n\nexport function fetchForecast(lat: number, lon: number, sted: string) {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/ban-types\n  return (dispatch: AppDispatch) => {\n    return getForecastFromYr(lat, lon).then((forecast) => dispatch(updateForecast(forecast, sted)));\n  };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Moment from 'moment';\nimport { TrainDataSet, TrainData, ExtendedTrainData } from '../types/trains';\nimport { GenericProps } from '../types/generic';\n\nimport { fetchTrains } from '../redux/actions';\ninterface Props {\n  trains: TrainDataSet;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  dispatch: Function;\n}\n\nfunction parseTrain(data: TrainData): ExtendedTrainData {\n  const now = Moment();\n  const train: ExtendedTrainData = {\n    ...data,\n    fromNow: data.faktiskTid.diff(now, 's'),\n    fromNowM: data.faktiskTid.diff(now, 'm'),\n    ruteDiff: data.faktiskTid.diff(data.ruteTid, 'm'),\n  };\n  return train;\n}\n\nclass Ruter extends React.PureComponent<Props, GenericProps> {\n  private intervalId = 0;\n\n  public componentDidMount = () => {\n    window.setTimeout(() => this.updateTrains(), 5000);\n    this.intervalId = window.setInterval(() => this.updateTrains(), 60000);\n  };\n\n  public componentWillUnmount = () => {\n    window.clearInterval(this.intervalId);\n  };\n\n  private updateTrains() {\n    this.props.dispatch(fetchTrains());\n  }\n\n  private getTrainList() {\n    let tog = [];\n    const trains = Object.values(this.props.trains);\n    for (let i = trains.length - 1; i > -1; i -= 1) {\n      const t = parseTrain(trains[i]);\n      tog.push(t);\n    }\n\n    tog = tog\n      .sort((a, b) => {\n        return a.fromNow - b.fromNow;\n      })\n      .slice(0, 5);\n\n    const out = [];\n    for (let i = 0; i < tog.length; i += 1) {\n      const fontSize = i === 0 ? 18 : 14;\n      out.push(\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            marginBottom: 10,\n            fontSize,\n          }}\n          key={tog[i].id}\n        >\n          <div style={{ flex: 1 }}>{tog[i].fromNowM}m</div>\n          <div style={{ flex: 1 }}>{tog[i].faktiskTid.format('HH:mm')}</div>\n          <div style={{ flex: 2.2 }}>{tog[i].skalTil}</div>\n        </div>,\n      );\n    }\n    return out;\n  }\n\n  public render() {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          padding: '0.5vh',\n          flexDirection: 'column',\n          flex: 1,\n          justifyContent: 'flex-end',\n        }}\n      >\n        {this.getTrainList()}\n      </div>\n    );\n  }\n}\n\nexport default connect()(Ruter);\n","import * as React from 'react';\nimport Moment from 'moment';\n\nMoment.locale('nb');\n\ninterface State {\n  time: Moment.Moment;\n}\n\ninterface Props {\n  onClick(): void;\n}\n\nclass Clock extends React.PureComponent<Props, State> {\n  private interval = 0;\n\n  public constructor(props: Props) {\n    super(props);\n    this.state = { time: Moment() };\n  }\n\n  public componentDidMount(): void {\n    this.interval = window.setInterval(() => this.setState({ time: Moment() }), 1000);\n  }\n\n  public componentWillUnmount(): void {\n    window.clearInterval(this.interval);\n  }\n\n  public render(): React.ReactNode {\n    return (\n      <div className=\"clockTime\" onClick={() => this.props.onClick()}>\n        {this.state.time.format('HH:mm')}\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","import * as React from 'react';\nimport firebase from './firebase';\nimport store from 'store';\nimport { GenericProps } from './types/generic';\n\nclass Settings extends React.PureComponent<GenericProps, GenericProps> {\n  setBool = (key: string, value: boolean): void => {\n    store.set(key, value);\n    window.location.reload();\n  };\n\n  private async signOut() {\n    await firebase.auth().signOut();\n    window.location.reload();\n  }\n\n  public render(): React.ReactNode {\n    const showEnergy = store.get('showEnergy', true);\n    const showTrains = store.get('showTrains', true);\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flex: 1,\n          flexDirection: 'column',\n          justifyContent: 'space-evenly',\n          alignItems: 'center',\n        }}\n      >\n        <div>\n          <label htmlFor=\"showEnergy\">Show Energy</label>\n          <input\n            type=\"checkbox\"\n            checked={showEnergy}\n            id=\"showEnergy\"\n            onChange={() => this.setBool('showEnergy', !showEnergy)}\n          ></input>\n        </div>\n        <div>\n          <label htmlFor=\"showTrains\">Show trains</label>\n          <input\n            type=\"checkbox\"\n            checked={showTrains}\n            id=\"showTrains\"\n            onChange={() => this.setBool('showTrains', !showTrains)}\n          ></input>\n        </div>\n        <button type=\"button\" onClick={() => this.signOut()}>\n          Logg ut\n        </button>\n        <button type=\"button\" onClick={() => window.location.reload()}>\n          Last inn på nytt\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Settings;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Moment from 'moment';\nimport store from 'store';\nimport Solceller from './solceller/Solceller';\nimport firebase from './firebase';\nimport Kalender from './kalender/Kalender';\nimport Ruter from './ruter/Ruter';\nimport Klokke from './Klokke';\nimport Settings from './Settings';\nimport { updateNetatmo, updateNetatmoAverages } from './redux/actions';\nimport { NetatmoStore } from './redux/Netatmo';\nimport { fetchForecast } from './redux/actions';\nimport { TrainDataSet } from './types/trains';\nimport { AppStore } from './redux/reducers';\nimport './tellulf.css';\nimport { NetatmoAverageData } from './redux/NetatmoAverages';\nimport TibberUpdater from './tibberUpdater';\nimport SolarUpdater from './solarUpdater';\n\nconst steder = {\n  oslo: { lat: 59.9409, long: 10.6991 },\n  sandefjord: { lat: 59.1347, long: 10.325 },\n};\n\ninterface Props {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  dispatch: Function;\n  loggedIn: boolean;\n  trains: TrainDataSet;\n  temperature: number;\n  netatmo: NetatmoAverageData;\n  updaters: { tibber: TibberUpdater; solar: SolarUpdater };\n}\n\ninterface State {\n  setupMode: boolean;\n}\n\nclass Tellulf extends React.PureComponent<Props, State> {\n  private interval = 0;\n  private width = 0;\n\n  private toggleMode: () => void;\n  public constructor(props: Props) {\n    super(props);\n    this.state = { setupMode: false };\n    this.toggleMode = (): void => {\n      this.setState({ setupMode: !this.state.setupMode });\n    };\n  }\n\n  public componentDidMount() {\n    this.startReloadLoop();\n    this.attachNetatmoListener();\n    this.updateWeather();\n    this.width = window.innerWidth;\n    this.interval = window.setInterval(() => this.updateWeather(), 60 * 1000 * 15);\n  }\n\n  public componentWillUnmount() {\n    window.clearInterval(this.interval);\n  }\n\n  private attachNetatmoListener() {\n    const dbRef = firebase.database().ref('netatmo/currentData');\n    dbRef.on('value', (snapshot) => {\n      if (snapshot) {\n        const data: NetatmoStore = snapshot.val() as NetatmoStore;\n        this.props.dispatch(updateNetatmo(data));\n      }\n    });\n    const dbRefAvg = firebase.database().ref('netatmo/areaData');\n    dbRefAvg.on('value', (snapshot) => {\n      if (snapshot) {\n        const data = snapshot.val();\n        this.props.dispatch(updateNetatmoAverages(data));\n      }\n    });\n  }\n\n  private updateWeather() {\n    try {\n      // New\n      this.props.dispatch(fetchForecast(steder.oslo.lat, steder.oslo.long, 'oslo'));\n      this.props.dispatch(\n        fetchForecast(steder.sandefjord.lat, steder.sandefjord.long, 'sandefjord'),\n      );\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.log(err);\n    }\n  }\n\n  private startReloadLoop() {\n    const now = Moment();\n    const reload = Moment(now).startOf('hour').add(1, 'hour').add(5, 'seconds');\n    const diff = reload.diff(now, 'milliseconds');\n    setTimeout(() => {\n      window.location.reload();\n    }, diff);\n  }\n\n  public render(): React.ReactNode {\n    const showEnergySetting = store.get('showEnergy', true);\n    const showTrainsSetting = store.get('showTrains', true);\n\n    const showEnergy = this.width > 600 && showEnergySetting;\n    const showTrains = this.width > 600 && showTrainsSetting;\n\n    return (\n      <div className=\"grid\">\n        <div className=\"block gridCalendar\">\n          <Kalender key=\"tellulf-kalender\" />\n        </div>\n        <div className=\"block gridClock\">\n          <Klokke onClick={this.toggleMode} />\n          <div className=\"gridNetatmoTemp\">{this.props.temperature}&deg;</div>\n        </div>\n        {showEnergy && (\n          <div className=\"block gridEnergy\">\n            <Solceller key=\"tellulf-energi\" updaters={this.props.updaters} />\n          </div>\n        )}\n        {showTrains && (\n          <div className=\"block gridTrains\">\n            <Ruter trains={this.props.trains} key=\"tellulf-trains\" />\n          </div>\n        )}\n        {this.state.setupMode && (\n          <div className=\"block gridSettings\">\n            <Settings />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: AppStore) {\n  return {\n    trains: state.Trains,\n    temperature: state.NetatmoAverages.temperature,\n    netatmo: state.NetatmoAverages,\n  };\n}\n\nexport default connect(mapStateToProps)(Tellulf);\n","import { Action } from 'redux';\n\nimport { UPDATE_FORECAST } from './actions';\nimport { ForecastStore, WeatherLimits, Forecast } from '../types/forecast';\nimport { parseLimits } from '../weather/weatherHelpers';\n\nconst initalLimits: WeatherLimits = {\n  maxRain: 0,\n  maxTemp: 0,\n  upperRange: 0,\n  lowerRange: 0,\n  minTemp: 0,\n  ticks: [],\n};\n\nconst initialState: ForecastStore = {\n  data: {},\n  limits: initalLimits,\n};\n\ninterface KnownAction {\n  type: string;\n  data: Forecast;\n  sted: string;\n}\n\nexport default function Weather(\n  state: ForecastStore = initialState,\n  incomingAction: Action,\n): ForecastStore {\n  const action = incomingAction as KnownAction;\n  switch (action.type) {\n    case UPDATE_FORECAST: {\n      const newState: ForecastStore = { ...state };\n\n      newState.data[action.sted] = action.data;\n\n      // Calculate all the limits\n      newState.limits = parseLimits(newState.data);\n\n      return newState;\n    }\n    default:\n      return state;\n  }\n}\n","import { NETATMO_UPDATE } from './actions';\nimport { Action } from 'redux';\n\nexport interface NetatmoStore {\n  co2: number;\n  inneFukt: number;\n  inneTemp: number;\n  inneTrykk: number;\n  inneTrykkTrend: string;\n  updated: number | null;\n  updatedNice: string;\n}\n\nconst initialState: NetatmoStore = {\n  co2: 0,\n  inneFukt: 0,\n  inneTemp: 0,\n  inneTrykk: 0,\n  inneTrykkTrend: '',\n  updated: null,\n  updatedNice: '',\n};\n\ninterface KnownAction {\n  type: string;\n  data: NetatmoStore;\n}\n\nexport default function Netatmo(\n  state: NetatmoStore = initialState,\n  incomingAction: Action,\n): NetatmoStore {\n  const action = incomingAction as KnownAction;\n  switch (action.type) {\n    case NETATMO_UPDATE: {\n      return { ...state, ...action.data };\n    }\n    default:\n      return state;\n  }\n}\n","import { NETATMO_UPDATE_AVERAGES } from './actions';\nimport { Action } from 'redux';\nexport interface NetatmoAverageData {\n  humidity: number;\n  pressure: number;\n  temperature: number;\n  time: number;\n}\n\nconst initState: NetatmoAverageData = {\n  humidity: 0,\n  pressure: 0,\n  temperature: 0,\n  time: 0,\n};\n\ninterface KnownAction {\n  type: string;\n  data: NetatmoAverageData;\n}\n\nexport default function NetatmoAverages(\n  state = initState,\n  incomingAction: Action,\n): NetatmoAverageData {\n  const action = incomingAction as KnownAction;\n  switch (action.type) {\n    case NETATMO_UPDATE_AVERAGES: {\n      try {\n        const newState: NetatmoAverageData = state;\n        newState.humidity = action.data.humidity;\n        newState.pressure = action.data.pressure;\n        newState.temperature = action.data.temperature;\n        newState.time = action.data.time;\n        return { ...state, ...action.data };\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.log(err);\n        return initState;\n      }\n    }\n    default:\n      return state;\n  }\n}\n","import { Action } from 'redux';\nimport { UPDATE_SOLAR_CURRENT, UPDATE_SOLAR_MAX } from './actions';\nimport { SolarState } from '../types/solar';\nimport { GenericProps } from '../types/generic';\nimport Moment from 'moment';\n\nconst initialState: SolarState = {\n  max: {\n    maxDay: 0,\n    maxMonth: 0,\n    maxYear: 0,\n    maxEver: 0,\n  },\n  current: {\n    averageFull: 0,\n    averageMinute: 0,\n    month: 0,\n    now: 0,\n    today: 0,\n    total: 0,\n    year: 0,\n    byHour: [],\n    currentTime: Moment(),\n    dataTime: null,\n  },\n};\n\ninterface KnownAction {\n  type: string;\n  data: GenericProps;\n}\n\nexport default function Solar(\n  state: SolarState = initialState,\n  incomingAction: Action,\n): SolarState {\n  const action = incomingAction as KnownAction;\n  switch (action.type) {\n    case UPDATE_SOLAR_MAX: {\n      return { ...state, max: { ...state.max, ...action.data } };\n    }\n    case UPDATE_SOLAR_CURRENT: {\n      return { ...state, current: { ...state.current, ...action.data } };\n    }\n    default:\n      return state;\n  }\n}\n","import { UPDATE_POWER_PRICES } from './actions';\nimport { PowerPriceState } from '../types/tibber';\nimport { Action } from 'redux';\n\nconst initState: PowerPriceState = {};\n\ninterface KnownAction {\n  type: string;\n  data: PowerPriceState;\n}\n\nexport default function PowerPrices(\n  state: PowerPriceState = initState,\n  incomingAction: Action,\n): PowerPriceState {\n  const action = incomingAction as KnownAction;\n  switch (action.type) {\n    case UPDATE_POWER_PRICES: {\n      try {\n        return { ...action.data };\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.log(err);\n        return initState;\n      }\n    }\n    default:\n      return state;\n  }\n}\n","import { UPDATE_TIBBER_REALTIME_CONSUMPTION } from './actions';\nimport Moment from 'moment';\nimport { Action } from 'redux';\nimport {\n  TibberRealtimeState,\n  TibberRealtimeData,\n  TibberRealTimeDataState,\n  houses,\n} from '../types/tibber';\n\nconst nettTariff = {}; // Positiv tariff\nconst nettTariffNeg = {}; // Negativ tariff\nnettTariff['hjemme'] = 0.4833;\nnettTariff['hytta'] = 0.4229;\nnettTariffNeg['hjemme'] = 0.05;\nnettTariffNeg['hytta'] = 0.05;\n\nconst defaultStateValues: TibberRealtimeState = {\n  accumulatedConsumption: 0,\n  accumulatedCost: 0,\n  accumulatedProduction: 0,\n  accumulatedReward: 0,\n  averagePower: 0,\n  actualCost: 0,\n  currency: 'NOK',\n  lastMeterConsumption: 0,\n  lastMeterProduction: 0,\n  maxPower: 0,\n  maxPowerProduction: 0,\n  minPower: 0,\n  minPowerProduction: 0,\n  power: 0,\n  powerProduction: 0,\n  timestamp: new Date().toISOString(),\n  calculatedConsumption: 0,\n  calculatedHomeAndCabinTotal: 0,\n  previousMeasuredProduction: 0,\n  lastHourByTenMinutes: {},\n  avgLastHour: 0,\n  avgLastHourSamples: 0,\n  avgLastHourStamp: new Date().toISOString(),\n};\n\nconst defaultState: TibberRealTimeDataState = {\n  hytta: defaultStateValues,\n  hjemme: defaultStateValues,\n  totalNetUsage: 0,\n};\n\ninterface KnownAction {\n  type: string;\n  where: houses;\n  data: TibberRealtimeData;\n}\n\nfunction calculateActualCost(\n  accumulatedConsumption: number,\n  accumulatedCost: number,\n  accumulatedProduction: number,\n  accumulatedReward: number,\n  sted: string,\n): number {\n  let cost = accumulatedCost - accumulatedReward; // Init with cost - reward.\n\n  cost += accumulatedConsumption * nettTariff[sted]; // Add nettleie\n  cost -= accumulatedProduction * nettTariffNeg[sted]; // subtract negativ nettleie\n\n  return cost;\n}\n\nexport default function TibberRealTime(\n  state: TibberRealTimeDataState = defaultState,\n  incomingAction: Action,\n): TibberRealTimeDataState {\n  const action = incomingAction as KnownAction;\n  switch (action.type) {\n    case UPDATE_TIBBER_REALTIME_CONSUMPTION: {\n      const {\n        accumulatedConsumption,\n        accumulatedCost,\n        accumulatedProduction,\n        accumulatedReward,\n        averagePower,\n        currency,\n        lastMeterConsumption,\n        lastMeterProduction,\n        maxPower,\n        maxPowerProduction,\n        minPower,\n        minPowerProduction,\n        power,\n        powerProduction,\n        timestamp,\n      } = action.data;\n\n      // Calculate weighted average for hour\n      const stamp = Moment(timestamp);\n\n      const actualCost = calculateActualCost(\n        accumulatedConsumption,\n        accumulatedCost,\n        accumulatedProduction,\n        accumulatedReward,\n        action.where,\n      );\n\n      const avgLastHourStamp = stamp.format('dddHH');\n\n      let avgLastHourSamples = state[action.where].avgLastHourSamples\n        ? state[action.where].avgLastHourSamples + 1\n        : 1;\n      let avgLastHour = Math.round(\n        state[action.where].avgLastHour +\n          (power - state[action.where].avgLastHour) / avgLastHourSamples,\n      );\n      if (state[action.where].avgLastHourStamp !== avgLastHourStamp) {\n        avgLastHour = Math.round(power);\n        avgLastHourSamples = 1;\n      }\n\n      const lastHourByTenMinutes = state[action.where].lastHourByTenMinutes\n        ? state[action.where].lastHourByTenMinutes\n        : {};\n\n      // Calculate realtime production\n      let calculatedConsumption = power;\n      let previousMeasuredProduction = state[action.where].previousMeasuredProduction;\n      // We are producing!\n      if (!calculatedConsumption) {\n        if (powerProduction > 0) {\n          previousMeasuredProduction = powerProduction; // Remember this!\n        }\n        calculatedConsumption = -1 * previousMeasuredProduction;\n      }\n\n      try {\n        const lastHourByTenMinutes = state[action.where].lastHourByTenMinutes\n          ? state[action.where].lastHourByTenMinutes\n          : {};\n        // calculate per minute\n        const startOfMinute = Math.floor(stamp.minutes() / 10);\n        const startTime = Moment(stamp)\n          .minutes(startOfMinute * 10)\n          .startOf('minute')\n          .toISOString();\n\n        if (lastHourByTenMinutes[startTime]) {\n          // TODO make average!\n        } else {\n          lastHourByTenMinutes[startTime] = { startTime, usage: power, samples: 1 };\n        }\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.log(err);\n      }\n\n      const newState = {\n        ...state,\n        [action.where]: {\n          ...state[action.where],\n          accumulatedConsumption,\n          accumulatedCost,\n          accumulatedProduction,\n          accumulatedReward,\n          averagePower,\n          currency,\n          lastMeterConsumption,\n          lastMeterProduction,\n          maxPower,\n          maxPowerProduction,\n          minPower,\n          minPowerProduction,\n          power,\n          powerProduction,\n          timestamp,\n          avgLastHour,\n          avgLastHourSamples,\n          avgLastHourStamp,\n          lastHourByTenMinutes,\n          calculatedConsumption,\n          previousMeasuredProduction,\n          actualCost,\n        },\n      };\n      newState.totalNetUsage =\n        state.hjemme.calculatedConsumption + state.hytta.calculatedConsumption;\n\n      return newState;\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport Forecast from './Forecast';\nimport Netatmo, { NetatmoStore } from './Netatmo';\nimport NetatmoAverages, { NetatmoAverageData } from './NetatmoAverages';\nimport Init from './Init';\nimport Solar from './Solar';\nimport PowerPrices from './PowerPrices';\nimport Trains from './Trains';\nimport TibberRealTime from './TibberRealTimeData';\nimport TibberLastDay from './TibberLastDay';\n\nimport { TrainDataSet } from '../types/trains';\nimport { SolarState } from '../types/solar';\nimport { InitState } from '../types/initstate';\nimport { ForecastStore } from '../types/forecast';\nimport { TibberRealTimeDataState, TibberUsageState, PowerPriceState } from '../types/tibber';\n\nexport interface AppStore {\n  Init: InitState;\n  Netatmo: NetatmoStore;\n  NetatmoAverages: NetatmoAverageData;\n  Solar: SolarState;\n  PowerPrices: PowerPriceState;\n  Trains: TrainDataSet;\n  TibberRealTime: TibberRealTimeDataState;\n  TibberLastDay: TibberUsageState;\n  Forecast: ForecastStore;\n}\n\nconst tellulfReducer = combineReducers({\n  Init,\n  Netatmo,\n  NetatmoAverages,\n  Solar,\n  PowerPrices,\n  Trains,\n  TibberRealTime,\n  TibberLastDay,\n  Forecast,\n});\n\nexport default tellulfReducer;\n","import { UPDATE_INIT_STATUS } from './actions';\nimport { InitState } from '../types/initstate';\nimport { Action } from 'redux';\n\ninterface KnownAction {\n  type: string;\n  key: string;\n  value: boolean;\n}\n\nexport default function Init(\n  state: InitState = { powerPrices: false, solar: false },\n  incomingAction: Action,\n): InitState {\n  const action = incomingAction as KnownAction;\n  switch (action.type) {\n    case UPDATE_INIT_STATUS: {\n      const newState: InitState = { ...state };\n      newState[action.key] = action.value;\n      return newState;\n    }\n    default:\n      return state;\n  }\n}\n","import Moment from 'moment';\nimport omitBy from 'lodash/omitBy';\nimport { Action } from 'redux';\nimport { UPDATE_TRAINS } from './actions';\nimport { TrainDataSet } from '../types/trains';\n\ninterface KnownAction {\n  type: string;\n  trains: TrainDataSet;\n}\n\nexport default function Trains(state: TrainDataSet = {}, incomingAction: Action): TrainDataSet {\n  const action = incomingAction as KnownAction;\n  switch (action.type) {\n    case UPDATE_TRAINS: {\n      // Remove old trains\n      const notPassed = omitBy(state, (call) => {\n        return Moment().isAfter(call.faktiskTid);\n      });\n      return { ...notPassed, ...action.trains };\n    }\n    default:\n      return state;\n  }\n}\n","import Moment from 'moment';\nimport { Action } from 'redux';\nimport { UPDATE_TIBBER_POWER_USAGE } from './actions';\n\nimport { TibberUsageAPIData, TibberUsageState } from '../types/tibber';\n\ninterface KnownAction {\n  type: string;\n  data: [TibberUsageAPIData];\n}\n\nexport default function TibberLastDay(state = {}, incomingAction: Action): TibberUsageState {\n  const action = incomingAction as KnownAction;\n  switch (action.type) {\n    case UPDATE_TIBBER_POWER_USAGE: {\n      const now = Moment();\n      const newState: TibberUsageState = {};\n      action.data.forEach((d) => {\n        const to = Moment(d.to);\n        const from = Moment(d.from);\n        if (to.isSame(now, 'day') && from.isSame(now, 'day')) {\n          const fromH = from.format('H');\n          const calculatedTime = Moment(from).add(30, 'minutes').valueOf();\n          newState[fromH] = { ...d, calculatedTime };\n        }\n      });\n      return newState;\n    }\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport tellulfReducer from './reducers';\n\n// eslint-disable-next-line no-underscore-dangle\nconst composeEnhancers = window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] || compose;\n\nconst store = createStore(\n  tellulfReducer /* persistedState , */,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nexport { store };\n\nexport type AppDispatch = typeof store.dispatch;\n","/* eslint-disable no-console */\nimport axios from 'axios';\nimport Moment from 'moment';\nimport firebase from './firebase';\nimport {\n  updatePowerPrices,\n  updateInitStatus,\n  updateRealtimeConsumption,\n  updatePowerUsage,\n  updateTibberConsumptionMonth,\n  updateTibberProductionMonth,\n} from './redux/actions';\nimport { AppDispatch } from './redux/store';\nimport {\n  TibberRealtimeData,\n  TibberConsumptionNode,\n  TibberConsumptionReturn,\n  TibberProductionNode,\n  TibberProductionReturn,\n  houses,\n} from './types/tibber';\n\nconst nettleie = 0.477;\n\nconst netPriceSettings = {\n  Hjemme: {\n    fast: 100,\n    kwh: 0.4795,\n    kwpProd: 0.07,\n  },\n  Hytta: {\n    fast: 287.5,\n    kwh: 0.41913,\n    kwhProd: 0.07,\n  },\n};\n\ninterface TibberSettings {\n  tibberApiKey: string;\n  tibberHomeKey: string;\n  tibberCabinKey: string;\n}\n\nexport default class TibberUpdater {\n  private store: { dispatch: AppDispatch };\n  public constructor(store: { dispatch: AppDispatch }) {\n    this.store = store;\n  }\n\n  public async updatePowerPrices(): Promise<void> {\n    const settings: TibberSettings = await this.getTibberSettings();\n\n    const queryPrices = `\n    {\n      viewer {\n        home(id: \"${settings.tibberHomeKey}\") {\n          currentSubscription {\n            priceInfo {\n              today {\n                total\n                energy\n                tax\n                startsAt\n              }\n            }\n          }\n        }\n      }\n    }\n`;\n\n    try {\n      const data = await axios({\n        url: 'https://api.tibber.com/v1-beta/gql',\n        method: 'post',\n        headers: {\n          Authorization: `bearer ${settings.tibberApiKey}`,\n        },\n        data: {\n          query: queryPrices,\n        },\n      });\n      if (data.status === 200) {\n        // Parse power prices\n        const prices = data.data.data.viewer.home.currentSubscription.priceInfo.today;\n        const powerPrices = {};\n        prices.forEach((p: { startsAt: string; total: number }) => {\n          const h = Moment(p.startsAt).hours();\n          powerPrices[h] = { total: p.total + nettleie };\n        });\n        this.store.dispatch(updatePowerPrices(powerPrices));\n        this.store.dispatch(updateInitStatus('powerPrices'));\n      }\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.log(err);\n    }\n  }\n\n  public async updateConsumption(): Promise<void> {\n    const settings: TibberSettings = await this.getTibberSettings();\n    const queryUsage = `\n    {\n      viewer {\n        home(id: \"${settings.tibberHomeKey}\") {\n          consumption(resolution: HOURLY, last: 24) {\n            nodes {\n              from\n              to\n              totalCost\n              unitCost\n              unitPrice\n              unitPriceVAT\n              consumption\n              consumptionUnit\n            }\n          }\n        }\n      }\n    }\n`;\n\n    try {\n      const data = await axios({\n        url: 'https://api.tibber.com/v1-beta/gql',\n        method: 'post',\n        headers: {\n          Authorization: `bearer ${settings.tibberApiKey}`,\n        },\n        data: {\n          query: queryUsage,\n        },\n      });\n      if (data.status === 200) {\n        const usage: TibberProductionNode[] = data.data.data.viewer.home.consumption.nodes;\n        this.store.dispatch(updatePowerUsage(usage));\n      }\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.log(err);\n    }\n  }\n\n  // Create and start websocket connection\n  public async subscribeToRealTime(id: string, name: houses): Promise<void> {\n    firebase\n      .database()\n      .ref(`tibber/realtime/${id}`)\n      .on('value', (snapshot: firebase.database.DataSnapshot | null) => {\n        try {\n          if (snapshot === null) return;\n          const tmp = snapshot.val();\n          const data: TibberRealtimeData = {\n            accumulatedConsumption: tmp.accumulatedConsumption,\n            accumulatedCost: tmp.accumulatedCost,\n            accumulatedProduction: tmp.accumulatedProduction,\n            accumulatedReward: tmp.accumulatedReward,\n            averagePower: tmp.averagePower,\n            currency: tmp.currency,\n            lastMeterConsumption: tmp.lastMeterConsumption,\n            lastMeterProduction: tmp.lastMeterProduction,\n            maxPower: tmp.maxPower,\n            maxPowerProduction: tmp.maxPowerProduction,\n            minPower: tmp.minPower,\n            minPowerProduction: tmp.minPowerProduction,\n            power: tmp.power,\n            powerProduction: tmp.powerProduction,\n            timestamp: tmp.timestamp,\n          };\n          this.store.dispatch(updateRealtimeConsumption(data, name));\n        } catch (err) {\n          // eslint-disable-next-line no-console\n          console.log(err);\n        }\n      });\n  }\n\n  public async updateConsumptionDaily(): Promise<void> {\n    const settings = await this.getTibberSettings();\n\n    const daysToAskFor = new Date().getDate();\n    const queryUsage = `\n    {\n      viewer {\n        homes {\n          id\n          appNickname\n          consumption(resolution: DAILY, last: ${daysToAskFor}) {\n            nodes {\n              from\n              to\n              totalCost\n              unitCost\n              unitPrice\n              unitPriceVAT\n              consumption\n              consumptionUnit\n            }\n          }\n          production(resolution: DAILY, last: ${daysToAskFor}) {\n            nodes {\n              from\n              to\n              unitPrice\n              unitPriceVAT\n              production\n              productionUnit\n              profit\n            }\n          }\n        }\n      }\n    }\n`;\n\n    try {\n      const data = await axios({\n        url: 'https://api.tibber.com/v1-beta/gql',\n        method: 'post',\n        headers: {\n          Authorization: `bearer ${settings.tibberApiKey}`,\n        },\n        data: {\n          query: queryUsage,\n        },\n      });\n      if (data.status === 200) {\n        const outConsumption: TibberConsumptionNode[] = [];\n        const outProduction: TibberProductionNode[] = [];\n        const now = Moment();\n        const usage = data.data.data.viewer.homes;\n        usage.forEach(\n          (u: {\n            appNickname: string;\n            id: string;\n            consumption: TibberConsumptionReturn;\n            production: TibberProductionReturn;\n          }) => {\n            u.consumption.nodes.forEach((n) => {\n              const from = Moment(n.from);\n              if (!from.isSame(now, 'month')) return;\n              outConsumption.push(n);\n            });\n            u.production.nodes.forEach((n) => {\n              const from = Moment(n.from);\n              if (!from.isSame(now, 'month')) return;\n              outProduction.push(n);\n            });\n          },\n        );\n        this.store.dispatch(updateTibberConsumptionMonth(outConsumption));\n        this.store.dispatch(updateTibberProductionMonth(outProduction));\n        // console.log(outConsumption, outProduction);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  public async updateConsumptionMonthlyAndCalculateBills(): Promise<void> {\n    const settings = await this.getTibberSettings();\n    const queryUsage = `\n    {\n      viewer {\n        homes {\n          id\n          appNickname\n          consumption(resolution: MONTHLY, last: 3) {\n            nodes {\n              from\n              to\n              totalCost\n              unitCost\n              unitPrice\n              unitPriceVAT\n              consumption\n              consumptionUnit\n            }\n          }\n        }\n      }\n    }\n`;\n\n    try {\n      const data = await axios({\n        url: 'https://api.tibber.com/v1-beta/gql',\n        method: 'post',\n        headers: {\n          Authorization: `bearer ${settings.tibberApiKey}`,\n        },\n        data: {\n          query: queryUsage,\n        },\n      });\n      if (data.status === 200) {\n        const usage = data.data.data.viewer.homes;\n        usage.forEach((u: { appNickname: string; consumption: { nodes: [] } }) => {\n          console.group(u.appNickname);\n          console.info('OBS: Mangler produksjonsdata!');\n          u.consumption.nodes.forEach(\n            (n: { from: string; to: string; totalCost: number; consumption: number }) => {\n              const from = Moment(n.from).format('MMMM');\n              const tibberPrice = n.totalCost; //.toFixed(2).toLocaleString();\n              const netPrice =\n                n.consumption * netPriceSettings[u.appNickname].kwh +\n                netPriceSettings[u.appNickname].fast; //.toFixed(2).toLocaleString();\n              const totalPrice = tibberPrice + netPrice;\n              console.group(`${from}: `);\n              console.log(`Strøm: ${tibberPrice.toFixed(2).toLocaleString()}`);\n              console.log(`Nett: ${netPrice.toFixed(2).toLocaleString()}`);\n              console.log(`Totalt: ${totalPrice.toFixed(2).toLocaleString()}`);\n\n              console.groupEnd();\n            },\n          );\n          // console.log(u);\n          console.groupEnd();\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  // Get tibber settings from firebase\n  public async getTibberSettings(): Promise<TibberSettings> {\n    const settingsRef = firebase.database().ref('settings');\n    const snapshot = await settingsRef.once('value');\n    const data = snapshot.val() as TibberSettings;\n    return data;\n  }\n}\n","import React from 'react';\nimport Moment from 'moment';\nimport { Provider } from 'react-redux';\nimport 'moment/locale/nb';\nimport Tellulf from './Tellulf';\nimport { GenericProps } from './types/generic';\nimport firebase from './firebase';\nimport { store } from './redux/store';\nimport tibberUpdater from './tibberUpdater';\nimport solarUpdater from './solarUpdater';\n\nMoment.locale('nb');\n\n// window.firebase = firebase;\nconst tibber = new tibberUpdater(store);\nconst solar = new solarUpdater(store);\n\nconst updaters = { tibber, solar };\n\ninterface AppState {\n  loggedIn: boolean;\n  user: number | null;\n  username: string;\n  password: string;\n}\n\nclass App extends React.PureComponent {\n  public state: AppState;\n\n  public constructor(props: GenericProps) {\n    super(props);\n    this.state = { loggedIn: false, user: null, username: '', password: '' };\n  }\n\n  public componentDidMount(): void {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({ loggedIn: true, user });\n      }\n    });\n  }\n\n  private doLogin() {\n    if (!this.state.username || !this.state.password)\n      alert('Tast inn brukernavn og passord din slask');\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(this.state.username, this.state.password)\n      .catch((error) => {\n        // Handle Errors here.\n        const errorCode = error.code;\n        const errorMessage = error.message;\n        alert(`${errorCode} ${errorMessage}`);\n        this.setState({ username: null, password: null });\n      });\n  }\n\n  private getLogin() {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          flex: 1,\n          margin: 0,\n          height: '100vh',\n          width: '100vw',\n          flexDirection: 'column',\n        }}\n      >\n        <div>\n          <input\n            type=\"text\"\n            value={this.state.username}\n            placeholder=\"Brukernavn\"\n            onChange={(event) => this.setState({ username: event.target.value })}\n          />\n        </div>\n        <div>\n          <input\n            type=\"text\"\n            value={this.state.password}\n            placeholder=\"Passord\"\n            onChange={(event) => this.setState({ password: event.target.value })}\n          />\n        </div>\n        <div>\n          <button\n            disabled={!this.state.username && !this.state.password}\n            onClick={() => this.doLogin()}\n          >\n            Logg inn\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  public render(): React.ReactNode {\n    if (!this.state.loggedIn) return this.getLogin();\n    return (\n      <Provider store={store}>\n        <Tellulf loggedIn={this.state.loggedIn} updaters={updaters} />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import Moment from 'moment';\nimport firebase from './firebase';\nimport { updateSolarMax, updateSolarCurrent, updateInitStatus } from './redux/actions';\nimport { AppDispatch } from './redux/store';\nimport { SolarCurrent, SolarMaxData } from './types/solar';\n\nfunction parseByHour(data: []) {\n  const startOfDay = Moment().startOf('day');\n\n  const out = data.map((d: { minutesFromMidnight: number; production: number }) => {\n    const time = Moment(startOfDay).add(d.minutesFromMidnight, 'minutes');\n    return { time: time.valueOf(), production: d.production };\n  });\n  return out;\n}\n\nexport default class SolarUpdater {\n  private store: { dispatch: AppDispatch };\n\n  public constructor(store: { dispatch: AppDispatch }) {\n    this.store = store;\n  }\n\n  public async attachListeners(): Promise<void> {\n    firebase\n      .database()\n      .ref('steca/currentData')\n      .on('value', (snapshot: firebase.database.DataSnapshot | null) => {\n        try {\n          if (snapshot === null) return;\n          const val = snapshot.val();\n          const dataTime =\n            typeof val.averages.time !== 'undefined' ? Moment(val.averages.time) : Moment(0);\n          const now = typeof val.effect.val !== 'undefined' ? val.effect.val : 0;\n          const today = typeof val.today.val !== 'undefined' ? val.today.val : 0;\n          const month = typeof val.month.val !== 'undefined' ? val.month.val : 0;\n          const year = typeof val.year.val !== 'undefined' ? val.year.val : 0;\n          const total = typeof val.total.val !== 'undefined' ? val.total.val : 0;\n          const averageFull = typeof val.averages.full !== 'undefined' ? val.averages.full : 0;\n          const averageMinute = typeof val.averages['1'] !== 'undefined' ? val.averages['1'] : 0;\n          const byHour =\n            typeof val.todayByHour.val !== 'undefined' ? parseByHour(val.todayByHour.val) : [];\n          const currentTime = Moment();\n          const state: SolarCurrent = {\n            now,\n            today,\n            month,\n            year,\n            total,\n            byHour,\n            currentTime,\n            averageFull,\n            averageMinute,\n            dataTime,\n          };\n          this.store.dispatch(updateSolarCurrent(state));\n          this.store.dispatch(updateInitStatus('solar'));\n        } catch (err) {\n          // eslint-disable-next-line no-console\n          console.log(err);\n        }\n      });\n  }\n\n  /*\n  Attach listeners to new max values\n  */\n  public async attachMaxListeners(): Promise<void> {\n    const now = Moment();\n    const y = now.format('YYYY');\n    const m = now.format('MM');\n    const d = now.format('DD');\n    const refDay = `steca/maxValues/daily/${y}/${m}/${d}`;\n    const refMonth = `steca/maxValues/monthly/${y}/${m}`;\n    const refYear = `steca/maxValues/yearly/${y}`;\n    const refEver = 'steca/maxValues/ever/';\n\n    firebase\n      .database()\n      .ref(refDay)\n      .on('value', (snapshot: firebase.database.DataSnapshot | null) => {\n        if (snapshot === null) return;\n        const val = snapshot.val();\n        if (val && val.value) {\n          const state: SolarMaxData = { maxDay: val.value };\n          this.store.dispatch(updateSolarMax(state));\n        }\n      });\n\n    firebase\n      .database()\n      .ref(refMonth)\n      .on('value', (snapshot: firebase.database.DataSnapshot | null) => {\n        if (snapshot === null) return;\n        const val = snapshot.val();\n        if (val && val.value) {\n          const state: SolarMaxData = { maxMonth: val.value };\n          this.store.dispatch(updateSolarMax(state));\n        }\n      });\n\n    firebase\n      .database()\n      .ref(refYear)\n      .on('value', (snapshot: firebase.database.DataSnapshot | null) => {\n        if (snapshot === null) return;\n        const val = snapshot.val();\n        if (val && val.value) {\n          const state: SolarMaxData = { maxYear: val.value };\n          this.store.dispatch(updateSolarMax(state));\n        }\n      });\n\n    firebase\n      .database()\n      .ref(refEver)\n      .on('value', (snapshot: firebase.database.DataSnapshot | null) => {\n        if (snapshot === null) return;\n        const val = snapshot.val();\n        if (val && val.value) {\n          const state: SolarMaxData = { maxEver: val.value };\n          this.store.dispatch(updateSolarMax(state));\n        }\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}